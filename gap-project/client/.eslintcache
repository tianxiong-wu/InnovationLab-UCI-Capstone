[{"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/index.js":"1","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/App.js":"2","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/reportWebVitals.js":"3","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/footer/footer.js":"4","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/404_error/404_error.js":"5","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/loginSignUp/loginSignUp.js":"6","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/signUpForm/signUpForm.js":"7","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/FAQPage/faq.js":"8","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/patientSettings/settings.js":"9","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/homePage/patient/patientHome.js":"10","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/FAQPage/question.js":"11","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/loginForm/loginForm.js":"12","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/nav/nav.js":"13","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/settings/settings.js":"14","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/patientNav/patientNav.js":"15","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/pharmContact/pharmContact.js":"16","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/patientSchedule/patientSchedule.js":"17","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/TutorialPage/tutorial.js":"18","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/scheduleEvent/scheduleEvent.js":"19","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/notifications/notifications.js":"20","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/patientProfile/profile.js":"21","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/pharmTutorialList/pharmTutorialList.js":"22","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/pharmAssignPage/pharmAssign.js":"23","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/patientTutorials/tutorial.js":"24","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/UserContext.js":"25","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/navPharmResponsive/navPharmResponsive.js":"26","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/homePage/pharmacist/pharmacistHome.js":"27","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/PatientContext.js":"28","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/authNav/authNav.js":"29","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/pharmFooter/footer.js":"30","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/TutorialContext.js":"31","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/TutorialList/tutorialList.js":"32","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/pharmSettings/settings.js":"33"},{"size":500,"mtime":1610145654937,"results":"34","hashOfConfig":"35"},{"size":3963,"mtime":1615326038241,"results":"36","hashOfConfig":"35"},{"size":362,"mtime":1610145654938,"results":"37","hashOfConfig":"35"},{"size":460,"mtime":1615107862084,"results":"38","hashOfConfig":"35"},{"size":424,"mtime":1612981913369,"results":"39","hashOfConfig":"35"},{"size":1174,"mtime":1615076358091,"results":"40","hashOfConfig":"35"},{"size":10848,"mtime":1615163719277,"results":"41","hashOfConfig":"35"},{"size":1985,"mtime":1614587175076,"results":"42","hashOfConfig":"35"},{"size":10944,"mtime":1615275740235,"results":"43","hashOfConfig":"35"},{"size":8869,"mtime":1615347309986,"results":"44","hashOfConfig":"35"},{"size":1180,"mtime":1613862548255,"results":"45","hashOfConfig":"35"},{"size":3384,"mtime":1615191914421,"results":"46","hashOfConfig":"35"},{"size":4028,"mtime":1613969866578,"results":"47","hashOfConfig":"35"},{"size":4832,"mtime":1614031496247,"results":"48","hashOfConfig":"35"},{"size":7191,"mtime":1615107862085,"results":"49","hashOfConfig":"35"},{"size":5546,"mtime":1614587175093,"results":"50","hashOfConfig":"35"},{"size":10943,"mtime":1615281609935,"results":"51","hashOfConfig":"35"},{"size":12186,"mtime":1615107862088,"results":"52","hashOfConfig":"35"},{"size":2984,"mtime":1615346565700,"results":"53","hashOfConfig":"35"},{"size":763,"mtime":1614036249578,"results":"54","hashOfConfig":"35"},{"size":1280,"mtime":1614587175084,"results":"55","hashOfConfig":"35"},{"size":15245,"mtime":1615282367344,"results":"56","hashOfConfig":"35"},{"size":42082,"mtime":1615192808806,"results":"57","hashOfConfig":"35"},{"size":1352,"mtime":1614587175090,"results":"58","hashOfConfig":"35"},{"size":87,"mtime":1614587175067,"results":"59","hashOfConfig":"35"},{"size":6492,"mtime":1615107862085,"results":"60","hashOfConfig":"35"},{"size":9239,"mtime":1615164954422,"results":"61","hashOfConfig":"35"},{"size":90,"mtime":1614823058317,"results":"62","hashOfConfig":"35"},{"size":2273,"mtime":1615076358089,"results":"63","hashOfConfig":"35"},{"size":458,"mtime":1615097094877,"results":"64","hashOfConfig":"35"},{"size":91,"mtime":1615107862083,"results":"65","hashOfConfig":"35"},{"size":4252,"mtime":1615191914421,"results":"66","hashOfConfig":"35"},{"size":14842,"mtime":1615275740236,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"axtido",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"70"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"70"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"70"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"70"},"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/index.js",[],["160","161"],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/App.js",["162"],"import React, { useState, useMemo } from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\nimport PatientNav from './components/patientNav/patientNav';\nimport NavPharmResponsive from \"./components/navPharmResponsive/navPharmResponsive\";\nimport PharmContact from './pages/pharmContact/pharmContact';\nimport FAQPage from './pages/FAQPage/faq';\nimport PatientHome from './pages/homePage/patient/patientHome';\nimport PharmacistHome from \"./pages/homePage/pharmacist/pharmacistHome\";\nimport Profile from './pages/patientProfile/profile';\nimport Error from './pages/404_error/404_error';\nimport TutorialPage from './pages/TutorialPage/tutorial';\nimport TutorialList from './pages/TutorialList/tutorialList';\nimport LoginSignUp from \"./pages/loginSignUp/loginSignUp\";\nimport Footer from './components/footer/footer'\nimport PharmFooter from './components/pharmFooter/footer';\nimport Settings from './pages/patientSettings/settings';\nimport PharmSettings from './pages/pharmSettings/settings';\nimport Schedule from './pages/patientSchedule/patientSchedule';\nimport PharmTutorials from './pages/pharmTutorialList/pharmTutorialList';\nimport PharmAssign from './pages/pharmAssignPage/pharmAssign';\nimport { UserContext } from './UserContext';\nimport { PatientContext } from './PatientContext';\nimport { TutorialContext } from './TutorialContext';\nimport LoginForm from './components/loginForm/loginForm';\nimport SignUpForm from './components/signUpForm/signUpForm';\nimport AuthNav from './components/authNav/authNav';\nfunction App() {\n  const [user, setUser] = useState(null);\n  const providerValue = useMemo(() => ({user, setUser}), [user, setUser]);\n  \n  const [patient, setPatient] = useState(null);\n  const patientProviderValue = useMemo(() => ({patient, setPatient}), [patient, setPatient]);\n\n  const [tutorial, setTutorial] = useState(null);\n  const tutorialProviderValue = useMemo(() => ({tutorial, setTutorial}), [tutorial, setTutorial]);\n\n  return (\n    <UserContext.Provider value={providerValue}>\n      <TutorialContext.Provider value={tutorialProviderValue}>\n      {user !== null && user.role === \"patient\" ? \n        <Router>\n            <PatientNav/>\n              <Switch>\n                <Route path=\"/faq\" component={FAQPage}/>\n                <Route path=\"/Schedule\" component={Schedule}/>\n                <Route path=\"/Tutorials\" component={TutorialList}/>\n                <Route path=\"/contact\" component={PharmContact}/>\n                <Route path=\"/profile\" component={Profile}/>\n                <Route path=\"/settings\" component={Settings}/>\n                <Route path=\"/tutorialPage\" component={TutorialPage}/>\n                <Route path=\"/\" component={PatientHome}/>\n                <Route component = {Error}/>\n              </Switch>\n        </Router> : user !== null && user.role === \"pharmacist\" ?\n        <PatientContext.Provider value={patientProviderValue}>\n          <Router>\n            <NavPharmResponsive/>\n            <Switch>\n              <Route path=\"/faq\" component={FAQPage}/>\n              <Route path=\"/Tutorials\" component={PharmTutorials}/>\n              <Route path=\"/settings\" component={PharmSettings}/>\n              <Route path=\"/pharmAssign\" component={PharmAssign}/>\n              <Route path=\"/tutorialPage\" component={TutorialPage}/>\n              <Route path=\"/\" component={PharmacistHome}/>\n              <Route component = {Error}/>\n            </Switch>\n            <PharmFooter/>\n          </Router>\n        </PatientContext.Provider> :\n        <Router>\n          <AuthNav/>\n          <LoginSignUp/>\n          <Switch>\n            <Route path = \"/Login\" component={LoginForm}/>\n            <Route path = \"/Signup\" component={SignUpForm}/>\n            <Route path = \"/loginSignup\" component ={LoginSignUp}/>\n          </Switch>\n        </Router>\n        }\n      </TutorialContext.Provider>\n    </UserContext.Provider>\n  );\n}\nexport default App;\n\n/**\n */","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/reportWebVitals.js",[],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/footer/footer.js",["163","164","165"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport '../footer/footer.css';\n\n\nexport default function footerBar() {\n\treturn (\n\t\t<div className=\"footerContainer\">\n\t\t\t<div className=\"liveHelpBar\">\n\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t<a className=\"footerLink\" href=\"#\">Live Help</a>\n\t\t\t\t</Typography>\n\t\t\t</div>\n\t\t</div>\n\t);\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/404_error/404_error.js",["166","167","168"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport '../404_error/404_error.css'\n\n\nexport default function error_page() {\n\treturn (\n\t\t<div className=\"errorContainer\">\n\t\t\t<div className=\"errorMessage\">\n\t\t\t\tOops, the page you are trying to find does not exist!\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/loginSignUp/loginSignUp.js",["169","170","171","172","173"],"import React, { useState } from \"react\"\nimport SignUpForm from \"../../components/signUpForm/signUpForm\"\nimport LoginForm from \"../../components/loginForm/loginForm\"\nimport { Grid } from \"@material-ui/core\"\n\nexport default function LoginSignUp(){\n\n    const [signUp, setSignUp] = useState(true);\n    const [login, setLogin] = useState(true);\n\n    const toggleSignupClicked = () => {\n        setLogin(false);\n    }\n\n    const toggleLoginClicked = () => {\n        setSignUp(false);\n    }\n\n    return (\n        <Grid container>\n            <Grid item xs={2}></Grid>\n            <Grid item xs={8}>\n                {signUp === true ?\n                <div onClick={toggleSignupClicked}> \n                    <SignUpForm/>\n                </div>\n                : null }\n                {login === true ?\n                <div onClick={toggleLoginClicked}>\n                    <LoginForm loginLanding={true} loginForm={false}/>\n                </div>\n                : null }\n            </Grid>\n            <Grid item xs={2}></Grid>\n        </Grid>\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/signUpForm/signUpForm.js",["174","175","176","177","178","179"],"import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport { Typography } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport LoginForm from \"../loginForm/loginForm\"\nimport \"../signUpForm/signUpForm.css\"\nimport axios from \"axios\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n      width: \"97%\",\n      marginTop: \"10vh\"\n    },\n  }));\n\n\nexport default function SignUpForm(props){\n    // Email validation\n    var validator = require('email-validator');\n    function validateEmail(email) {\n        validator.validate(email);\n    }\n\n    // Phone validation\n    const phone = require('fonz.js');\n    var passwordValidator = require('password-validator');\n    var schema = new passwordValidator();\n    schema\n    .is().min(8)                                    // Minimum length 8\n    .is().max(16)                                   // Maximum length 16\n    .has().uppercase()                              // Must have uppercase letters\n    .has().lowercase()                              // Must have lowercase letters\n    .has().digits(2)                                // Must have at least 2 digits\n    .has().not().spaces()                           // Should not have spaces\n    .has().symbols();                                // Must have at least one symbol*/\n\n    const classes = useStyles();\n    const [signupLanding, setSignupLanding] = useState(true);\n    const [role, setRole] = useState(\"\");\n    const [roleLanding, setRoleLanding] = useState(true);\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [birthdate, setBirthdate] = useState(\"\");\n    const [gender, setGender] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\n    const [loginLanding, setLoginLanding] = useState(false);    \n  \n    const user = {\n      firstName: firstName,\n      lastName: lastName,\n      birthday: birthdate,\n      gender: gender,\n      email: email,\n      phoneNumber: phoneNumber,\n      password: password,\n      role: role\n    }\n\n    const pharmacistUser = {\n      firstName: firstName,\n      lastName: lastName,\n      birthday: birthdate,\n      gender: gender,\n      email: email,\n      phoneNumber: phoneNumber,\n      password: password,\n      role: role\n    }\n\n    const toggleOne = () => {\n      setSignupLanding(false);\n      setRoleLanding(true);\n    }\n\n    const toggleRoleSelect = () => {\n      setRoleLanding(false);\n      setSignupFormPageOne(true);\n    }\n\n    const toggleRoleTwo = () => {\n      setSignupFormPageOne(false);\n      setRoleLanding(true);\n    }\n\n    const toggleTwo = () => {\n      setSignupFormPageOne(false);\n      setSignupFormPageTwo(true);\n    }\n\n    const toggleThree = () => {\n      setSignupFormPageTwo(false);\n      setSuccessPage(true);\n      \n      if (role === \"patient\"){\n      axios.post(`http://localhost:5000/patients/register`, user).then(res=>{\n        console.log(res);\n      })}\n      else if (role === \"pharmacist\"){\n        axios.post(`http://localhost:5000/pharmacists/register`, pharmacistUser).then(res=>{\n        console.log(res);\n      })}\n    }\n\n    const toggleFour = () => {\n      setSignupFormPageTwo(false);\n      setSignupFormPageOne(true);\n    }\n\n    const toggleFive = () => {\n      setSuccessPage(false);\n    }\n\n    const [signupFormPageOne, setSignupFormPageOne] = useState(false);\n    const [signupFormPageTwo, setSignupFormPageTwo] = useState(false);\n    const [successPage, setSuccessPage] = useState(false);\n\n    const handleChange = (event) => {\n        setGender(event.target.value);\n    }\n\n    const handleRoleChange = (event) => {\n      setRole(event.target.value);\n      if(role !== \"\"){\n        setRoleLanding(true);\n      }\n    };\n\n    const handleFirstNameChange = (event) => {\n        setFirstName(event.target.value);\n    }\n\n    const handleLastNameChange = (event) => {\n        setLastName(event.target.value);\n    }\n\n    const handleBirthdateChange = (event) => {\n      setBirthdate(event.taret.value);\n    }\n\n    const handleEmailChange = (event) => {\n        setEmail(event.target.value);\n    }\n\n    const handlePasswordChange = (event) => {\n        setPassword(event.target.value);\n    }\n\n    const handlePhoneNumberChange = (event) => {\n        setPhoneNumber(event.target.value);\n    }\n\n    const handleRepeatChange = (event) => {\n        setRepeatPassword(event.target.value);\n    }\n\n    return(\n      <div className={classes.root}>\n          <Grid container justify=\"center\" spacing={3}>\n              <Grid item xs={1} md={3}></Grid>\n              {roleLanding === true ? \n              <Grid item xs={10} md={6}>\n                <div className=\"formDiv\">\n                  <Typography variant=\"h5\" color=\"primary\" className=\"formTitle\">Select Your Account Type</Typography>\n                  <FormControl className={classes.formControl}>\n                    <InputLabel id=\"demo-simple-select-label\">Role</InputLabel>\n                    <Select\n                      labelId=\"demo-simple-select-label\"\n                      id=\"demo-simple-select\"\n                      value={role}\n                      onChange={handleRoleChange}\n                      fullWidth\n                    >\n                      <MenuItem value={\"\"}>None</MenuItem>\n                      <MenuItem value={\"patient\"}>Patient</MenuItem>\n                      <MenuItem value={\"pharmacist\"}>Pharmacist</MenuItem>\n                    </Select>\n                </FormControl>\n                <Button disabled={role === \"\"} variant=\"outlined\" className=\"nextFull\" onClick={toggleRoleSelect}>Next</Button>\n                </div>  \n              </Grid> : null}\n              {signupFormPageOne === true ? \n                <Grid item xs={10} md={6}>\n                  <div className=\"formDiv\">\n                    <Typography variant=\"h5\" color=\"primary\" className=\"formTitle\">Create your account</Typography>\n                    <TextField className=\"formStyling formMargin\" id=\"outlined-basic\" label=\"First Name\" defaultValue={firstName} variant=\"outlined\" onChange={handleFirstNameChange} required />\n                    <TextField className=\"formStyling formMargin\" id=\"outlined-basic\" label=\"Last Name\" defaultValue={lastName} variant=\"outlined\" onChange={handleLastNameChange} required />\n                    <TextField \n                      id=\"date\"\n                      label=\"Birthday\"\n                      type=\"date\"\n                      defaultValue={birthdate}\n                      className=\"formMargin\"\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                      fullWidth\n                      onChange={handleBirthdateChange}\n                      required />\n                    <FormControl className=\"selectGender formMargin\" required>\n                      <InputLabel id=\"demo-simple-select-label\">Gender</InputLabel>\n                      <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        defaultValue={gender}\n                        onChange={handleChange}\n                      >\n                        <MenuItem value=\"male\">Male</MenuItem>\n                        <MenuItem value=\"female\">Female</MenuItem>\n                        <MenuItem value=\"other\">Other</MenuItem>\n                      </Select>\n                  </FormControl>\n                    <Button variant=\"outlined\" className=\"prev\" onClick={toggleRoleTwo}>Back</Button>\n                    <Button disabled={firstName === \"\" || lastName === \"\" || birthdate === \"\" || gender === \"\"} variant=\"outlined\" className=\"next\" onClick={toggleTwo}>Next</Button>\n                  </div>\n                </Grid>\n              : null}\n              {signupFormPageTwo === true ? \n                <Grid item xs={10} md={6}>\n                  <div className=\"formDiv\">\n                    <Typography variant=\"h5\" color=\"primary\" className=\"formTitle\">Create your account</Typography>\n                    <TextField className=\"formStyling formMargin\" id=\"outlined-basic\" label=\"Email\" variant=\"outlined\" defaultValue={email} onChange = {handleEmailChange} required />\n                    <TextField className=\"formStyling formMargin\" id=\"outlined-basic\" label=\"Phone\" variant=\"outlined\" defaultValue={phoneNumber} onChange = {handlePhoneNumberChange} required />\n                    <TextField className=\"formStyling formMargin\" type=\"password\" id=\"outlined-basic\" label=\"Password\" variant=\"outlined\" onChange = {handlePasswordChange} required />\n                    <TextField className=\"formStyling formMargin\" type=\"password\" id=\"outlined-basic\" label=\"Repeat Password\" variant=\"outlined\" onChange = {handleRepeatChange} required />\n                  </div>\n                  <Button variant=\"outlined\" className=\"prev\" onClick={toggleFour}>Back</Button>\n                  <Button disabled = {\n                        email === \"\" ||\n                        validateEmail(email) === true || \n                        phone.validate(phoneNumber) === false || \n                        schema.validate(password) === false || \n                        password !== repeatPassword } \n                        variant=\"outlined\" className=\"next\" onClick={toggleThree}>Submit</Button>\n                </Grid>\n              : null}\n              {successPage === true ? \n                <Grid item xs={10} md={6}>\n                  <div className=\"formDiv\">\n                    <img src=\"https://picsum.photos/seed/picsum/200/300\" className=\"signupSuccessPhoto\"/>\n                    <Typography variant=\"h5\" align=\"center\" className=\"signupSuccessTypography\">Congratulations!</Typography>\n                    <Typography variant=\"h5\" align=\"center\">Your account is ready</Typography>\n                  </div>\n                <Link to=\"/Login\" className=\"loginLink\" onClick={toggleFive}><Button className=\"nextFull\">Login</Button></Link>\n                </Grid>\n              : null }\n              {loginLanding === true ? \n                <LoginForm loginLanding={false} loginForm={true}/>\n              : null}\n              <Grid item xs={1} md={3}></Grid>                 \n          </Grid>\n      </div>\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/FAQPage/faq.js",["180","181"],"import React, { useEffect, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport SearchBar from \"material-ui-search-bar\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Questions from './question'\nimport './faq.css'\nimport axios from 'axios';\n\nexport default function FAQ(){\n    const [questions, setQuestions] = useState([]);\n    const [displayQuestions, setDisplayQuestions] = useState([{}]);\n    const [value, setValue] = useState('');\n\n    useEffect( () => {\n        axios.get('http://localhost:5000/faqs/all').then(res => {\n            let questionList = [];\n            for (const [key, val] of Object.entries(res.data)){\n                questionList.push([val.question, val.answer])\n            }\n            setQuestions(questionList);\n        });\n    }, []);\n\n    function handleSearch(val){\n        if (val === \"\"){\n            return;\n        }\n        setValue(val);\n        let questionList = [];\n        questions.forEach((faq) => {\n            if (faq[0].includes(val) || faq[1].includes(val)) {\n                questionList.push(faq);\n            }\n        })\n        setDisplayQuestions(questionList);\n        console.log(displayQuestions);\n    }\n\n\n    return(\n        <Container>\n            <Typography variant=\"h4\" className=\"title\">How can we help you?</Typography>\n            <SearchBar\n                className=\"searchBar\"\n                value={value}\n                type=\"text\"\n                onChange={(value) => handleSearch(value)}>\n            </SearchBar>\n            <Typography variant=\"h4\" className=\"titleTwo\">Frequently Asked Questions</Typography>\n            <Questions questionList={displayQuestions} />\n            <Typography variant=\"h4\" className=\"information\">\n                Still have questions?<br/>Contact us using online help<br/>Or call 123-456-7890\n            </Typography>\n        </Container>\n    )\n}\n","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/patientSettings/settings.js",["182","183"],"import React, {useState, useContext} from \"react\";\nimport { UserContext } from \"../../UserContext\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { TextField } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {FormControl, \n        FormLabel,\n        Radio, \n        RadioGroup, \n        FormControlLabel} from '@material-ui/core';\nimport './settings.css'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n  };\n  \n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n  \n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper,\n      height: '100vh'\n    },\n  }));\n\nexport default function PatientSettings(){\n\n    const {user, setUser} = useContext(UserContext);\n\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n    const [phone, setPhone] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [currentPass, setCurrentPass] = useState(\"\");\n    const [newPass, setNewPass] = useState(\"\");\n    const [repeatPass, setRepeatPass] = useState(\"\");\n\n    const [notifyPhone, setNotifyPhone] = useState(\"Yes\");\n    const [notifyEmail, setNotifyEmail] = useState(\"Yes\");\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    }\n\n    const handleNotifyPhone = (event, newValue) => {\n        setNotifyPhone(newValue);\n    };\n\n    const handleNotifyEmail = (event, newValue) => {\n        setNotifyEmail(newValue);\n    };\n\n    const handleCurrentPass = (event, newValue) => {\n        setCurrentPass(newValue);\n    }\n\n    const handleNewPass = (event, newValue) => {\n        setNewPass(newValue);\n    }\n\n    const handleRepeatPass = (event, newValue) => {\n        setRepeatPass(newValue);\n    }\n\n    const handleNewPhone = (event, newValue) => {\n        setPhone(newValue);\n    }\n\n    const handleNewEmail = (event, newValue) => {\n        setEmail(newValue);\n    }\n\n    function updatePatientSettings() {\n        alert('you saved your phone number')\n    }\n    \n    return (\n        <Grid container>\n            <Grid item xs={1}></Grid>\n            <Grid item xs={10}>\n            <div className={classes.root}>\n                <Typography variant=\"h3\" align=\"center\" className=\"pageLabel\">Settings</Typography>\n                <div className=\"blueOutline\">\n                <AppBar position=\"static\" className=\"appBar\">\n                    <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" className=\"tabAlign\">\n                    <Tab label=\"Security\" {...a11yProps(0)} className=\"tabs\"/>\n                    <Tab label=\"Notifications\" {...a11yProps(1)} className=\"tabs\"/>\n                    </Tabs>\n                </AppBar>\n                <TabPanel value={value} index={0} >\n                    <div className=\"panelStyling\">\n                        <TextField \n                            type=\"password\"\n                            id=\"password\"\n                            label=\"Enter current password\"\n                            defaultValue={currentPass}\n                            variant=\"outlined\"\n                            className=\"securityStyling\"\n                            onChange={handleCurrentPass}\n                            fullWidth\n                            required>\n                        </TextField>\n                        <TextField \n                            type=\"password\"\n                            id=\"password\"\n                            label=\"Enter new password\"\n                            defaultValue={newPass}\n                            variant=\"outlined\"\n                            className=\"securityStyling\"\n                            onChange={handleNewPass}                            \n                            fullWidth\n                            required>\n                        </TextField>\n                        <TextField \n                            type=\"password\"\n                            id=\"password\"\n                            label=\"Confirm new password\"\n                            defaultValue={repeatPass}\n                            variant=\"outlined\"\n                            className=\"securityStyling\"\n                            onChange={handleRepeatPass}\n                            fullWidth\n                            required>\n                        </TextField>\n                        <div className=\"saveButtonContainer\"><Button variant=\"outlined\" className=\"saveButton\" onClick={updatePatientSettings}>Save</Button></div>\n                    </div>\n                </TabPanel>\n                <TabPanel value={value} index={1}>\n                    <div className=\"panelStyling\">\n                        <div className=\"phoneNumberContainer\">\n                            <Typography variant=\"h5\" align=\"center\" className=\"phoneHeading\">Phone Number</Typography>\n                            <div className=\"settingsForm\">\n                                <div className=\"formHalf\">\n                                    <FormControl component=\"fieldset\" className=\"formControl\">\n                                        <FormLabel component=\"legend\">Notify Me?</FormLabel>\n                                        <RadioGroup row ria-label=\"phone notification\" name=\"phone notification\" className=\"formLabelShift\" value={notifyPhone} onChange={handleNotifyPhone}>\n                                            <FormControlLabel value=\"Yes\" control={<Radio />} label=\"Yes\" />\n                                            <FormControlLabel value=\"No\" control={<Radio />} label=\"No\" />\n                                        </RadioGroup>\n                                    </FormControl>\n                                </div>\n                                <div className=\"formHalf\">\n                                    <FormControl component=\"fieldset\" className=\"formControl\">\n                                        <FormLabel component=\"legend\" className=\"formLabel\">Set a new phone?</FormLabel>\n                                        <TextField \n                                            id=\"outlined-basic\"\n                                            label={user.phoneNumber}\n                                            defaultValue={phone}\n                                            onChange={handleNewPhone}\n                                            variant=\"outlined\"\n                                            className=\"formLabelShift\"\n                                            fullWidth>\n                                        </TextField>\n                                    </FormControl>                                \n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"emailContainer\">\n                            <Typography variant=\"h5\" align=\"center\" className=\"emailHeading\">Email</Typography>\n                            <div className=\"settingsForm\">\n                                <div className=\"formHalf\">\n                                    <FormControl component=\"fieldset\" className=\"formControl\">\n                                        <FormLabel component=\"legend\">Notify Me?</FormLabel>\n                                        <RadioGroup row ria-label=\"email notification\" name=\"email notification\" className=\"formLabelShift\" value={notifyEmail} onChange={handleNotifyEmail}>\n                                            <FormControlLabel value=\"Yes\" control={<Radio />} label=\"Yes\" />\n                                            <FormControlLabel value=\"No\" control={<Radio />} label=\"No\" />\n                                        </RadioGroup>\n                                    </FormControl>\n                                </div>\n                                <div className=\"formHalf\">\n                                    <FormControl component=\"fieldset\" className=\"formControl\">\n                                        <FormLabel component=\"legend\" className=\"formLabel\">Set a new email?</FormLabel>\n                                        <TextField \n                                            id=\"outlined-basic\"\n                                            label={user.email}\n                                            defaultValue={email}\n                                            onChange={handleNewEmail}\n                                            variant=\"outlined\"\n                                            className=\"formLabelShift\">\n                                        </TextField>\n                                    </FormControl>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"saveButtonContainer\"><Button variant=\"outlined\" className=\"saveButton\" onClick={updatePatientSettings}>Save</Button></div>\n                    </div>\n                </TabPanel>\n            </div>\n            </div>\n            </Grid>\n            <Grid item xs={1}></Grid>\n      </Grid>\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/homePage/patient/patientHome.js",["184","185","186","187","188","189","190"],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/FAQPage/question.js",[],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/loginForm/loginForm.js",["191","192","193","194","195","196","197","198","199","200","201","202","203"],"import React, { useState, useContext } from \"react\";\nimport { UserContext } from \"../../UserContext\";\nimport { Button } from '@material-ui/core';\nimport { Typography } from \"@material-ui/core\";\nimport { Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { Grid } from \"@material-ui/core\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport \"../signUpForm/signUpForm.css\"\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    width: \"100%\",\n    marginTop: \"3%\"\n  },\n}));\n\nexport default function LoginForm(props){\n    const classes = useStyles();\n\n    // Handles login to initialize the userContext \n    const { user, setUser } = useContext(UserContext);\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [role, setRole] = useState(\"patient\");\n\n    const loginInfo = {\n      email: email,\n      password: password\n    }\n\n    const [loginLanding, setLoginLanding] = useState(props.loginLanding);\n    const toggleOne = () => {\n        setLoginLanding(false);\n        setLoginForm(true);\n    }\n\n    const handleEmailChange = (event) => {\n      setEmail(event.target.value)\n    }\n\n    const handlePasswordChange = (event) => {\n      setPassword(event.target.value)\n    }\n\n    const handleRoleChange = (event) => {\n      setRole(event.target.value);\n    }\n\n    const [loginForm, setLoginForm] = useState(props.loginForm);\n    //add toast\n    const toggleTwo = () => {\n      switch (role){\n        case \"patient\":\n          console.log(\"patient route\")\n          axios.post('http://localhost:5000/patients/login', loginInfo).then(res => {\n            setUser(res.data);\n          }).catch(err =>{\n            console.log(err);\n          })\n          break;\n        case \"pharmacist\":\n          console.log(\"pharm route\")\n          axios.post('http://localhost:5000/pharmacists/login', loginInfo).then(res => {\n            setUser(res.data);\n            }).catch(err =>{\n            console.log(err);\n          })\n          break;\n      }\n    }\n  \n\n    return(\n        <div className={classes.root} >\n          <Grid container justify=\"center\" spacing={3}>\n            <Grid item xs={1} md={3}></Grid>\n            <Grid item xs={10} md={6}>\n            <div className=\"formDiv\">\n              <img src=\"https://picsum.photos/seed/picsum/200/300\" className=\"signupSuccessPhoto\"/>\n              <TextField className=\"formStyling formMargin\" label=\"Email\" variant=\"outlined\" onChange = {handleEmailChange} required />\n              <TextField className=\"formStyling formMargin\" type = 'password' label=\"Password\" variant=\"outlined\" onChange = {handlePasswordChange} required />\n              <Button variant=\"outlined\" color=\"primary\" className=\"nextFullPassword\">Forgot Password?</Button>\n              <Button disabled={email === \"\" || password === \"\" || role === \"\"} variant=\"contained\" color=\"primary\" className=\"nextFull nextFullLogin\" onClick={toggleTwo}>Login</Button>\n            </div>\n          </Grid>\n              <Grid item xs={1} md={3}></Grid>                 \n          </Grid>\n        </div>\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/nav/nav.js",["204","205","206","207"],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/settings/settings.js",["208","209","210"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport EditIcon from '@material-ui/icons/Edit';\nimport '../settings/settings.css'\n\nfunction switchNotificationPatient () {\n\tconsole.log('hello');\n\tdocument.getElementById('securityContainer-patient').style.display = 'none';\n\tdocument.getElementById('notificationsContainer').style.display = 'flex';\n}\n\nfunction switchSecurityPatient () {\n\tconsole.log('hello');\n\tdocument.getElementById('securityContainer-patient').style.display = 'flex';\n\tdocument.getElementById('notificationsContainer').style.display = 'none';\n}\n\nexport default function settings() {\n\treturn (\n    <div className = 'settingsContainer-patient'>\n      <div className = 'settingsTitle-patient'>\n        Settings\n      </div>\n\n      <div id = 'securityContainer-patient'>\n        <div className = 'titleBar-patient'>\n          <div className = 'securityTitle-patient'onClick = {switchSecurityPatient}>\n            Security\n          </div>\n          <div className = 'notificationTitle-patient' onClick = {switchNotificationPatient} >\n            Notification\n          </div>\n        </div>\n\n        <div className = 'passwordContainer'>\n          <div className = 'password' id = 'currentPW'>\n            Current Password: *****\n          </div>\n          <div className = 'password' id = 'newPW'>\n            New Password: *****\n          </div>\n          <div className = 'password' id = 'retypePW'>\n            Retype New Password: *****\n          </div>\n\n\t\t\t\t\t<div className = 'break'></div>\n\n          <div className = 'saveButton'>\n            Save\n          </div>\n        </div>\n      </div>\n\n\t\t\t<div id = 'notificationsContainer'>\n\t\t\t\t\t\t<div className = 'titleBar-patient'>\n\t\t          <div className = 'securityTitle-patient'onClick = {switchSecurityPatient}>\n\t\t            Security\n\t\t          </div>\n\t\t          <div className = 'notificationTitle-patient' onClick = {switchNotificationPatient} >\n\t\t            Notification\n\t\t          </div>\n\t\t        </div>\n\n\t\t\t\t\t\t<div className = 'folderBorder-patient'>\n\t\t\t\t\t\t\t<div className = 'whiteBorder-patient'>\n\t\t\t          <div className = 'notificationSection'>\n\t\t\t              <div className = 'insideTitle-patient'>\n\t\t\t                Phone Number\n\t\t\t              </div>\n\t\t\t              <div className = 'notifyMe'>\n\t\t\t                Notify Me?\n\t\t\t              </div>\n\t\t\t\t\t\t\t\t\t\t<div className = 'yesContainer'>\n\t\t\t\t\t\t\t\t\t\t\t<div className = 'yes'>\n\t\t\t\t\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className = 'yesBox'> </div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className = 'noContainer'>\n\t\t\t\t\t\t\t\t\t\t\t<div className = 'no'>\n\t\t\t\t\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t              \t<div className = 'noBox'> </div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className = 'infoContainer-patient'>\n\t\t\t\t              <div className = 'infoBox-patient'>\n\t\t\t\t                Call me at:\n\t\t\t\t              </div>\n\t\t\t\t\t\t\t\t\t\t\t<div className = 'phone-patient_email_Container-patient'>\n\t\t\t\t\t              <div className = 'phone-patient'>\n\t\t\t\t\t                (408)123-4567\n\t\t\t\t\t              </div>\n\t\t\t\t\t              <div className = 'editContainer-patient'>\n\t\t\t\t\t                <EditIcon/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className = 'edit-patient'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t              </div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t          </div>\n\t\t\t\t\t\t\t\t<div className = 'notificationSection'>\n\t\t\t              <div className = 'insideTitle-patient'>\n\t\t\t                Email\n\t\t\t              </div>\n\t\t\t              <div className = 'notifyMe'>\n\t\t\t                Notify Me?\n\t\t\t              </div>\n\t\t\t\t\t\t\t\t\t\t<div className = 'yesContainer'>\n\t\t\t\t\t\t\t\t\t\t\t<div className = 'yes'>\n\t\t\t\t\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className = 'yesBox'> </div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className = 'noContainer'>\n\t\t\t\t\t\t\t\t\t\t\t<div className = 'no'>\n\t\t\t\t\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t              \t<div className = 'noBox'> </div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className = 'infoContainer-patient'>\n\t\t\t\t              <div className = 'infoBox-patient'>\n\t\t\t\t                Email me at:\n\t\t\t\t              </div>\n\t\t\t\t\t\t\t\t\t\t\t<div className = 'phone-patient_email_Container-patient'>\n\t\t\t\t\t              <div className = 'email-patient'>\n\t\t\t\t\t                innovationlab@email.com\n\t\t\t\t\t              </div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className = 'editContainer-patient'>\n\t\t\t\t\t                <EditIcon/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className = 'edit-patient'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t              </div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t          </div>\n\n\t\t\t\t\t\t\t\t<div className = 'break'></div>\n\n\t\t\t\t\t\t\t\t<div className = 'saveButton'>\n\t\t\t            Save\n\t\t\t          </div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n      </div>\n    </div>\n\t);\n}\n",["211","212"],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/patientNav/patientNav.js",["213","214","215"],"import React, {useState, useContext} from 'react';\nimport { UserContext } from \"../../UserContext\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CloseIcon from '@material-ui/icons/Close';\nimport logo from \"../../innovation.png\";\nimport \"./patientNav.css\"\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title:{\n        flexGrow: 1,\n    }\n}));\n\nexport default function PatientNav(){\n    const classes = useStyles();\n    \n    const {user, setUser} = useContext(UserContext);\n\n    const [auth, setAuth] = useState(true);\n    const [profileAnchor, setProfileAnchor] = React.useState(null);\n    const [hamburgerAnchor, setHamburgerAnchor] = React.useState(null);\n    const openProfile = Boolean(profileAnchor);\n    const openHamburger = Boolean(hamburgerAnchor);\n    const [hbIcon, setHbIcon] = React.useState(true);\n    const [closeIcon, setCloseIcon]= React.useState(false);\n\n    const handleProfile = (event) => {\n        setProfileAnchor(event.currentTarget);\n    };\n\n    const handleCloseProfile = () => {\n        setProfileAnchor(null);\n    };\n\n    const handleHamburger = (event) => {\n        setHamburgerAnchor(event.currentTarget);\n        setHbIcon(false);\n        setCloseIcon(true);\n    };\n\n    const handleHamburgerClose = () => {\n        setHamburgerAnchor(null);\n        setHbIcon(true);\n        setCloseIcon(false);\n    }\n\n    const handleLogout = () => {\n        setUser(null);\n    }\n\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar className=\"navStyling\">\n                    <div>\n                        <IconButton\n                            aria-label=\"hamburger list of pages\"\n                            aria-controls=\"menu-appbar\"\n                            aria-haspopup=\"true\"\n                            onClick={handleHamburger}\n                            color=\"inherit\">\n                                {hbIcon === true ? <MenuIcon className=\"hamburger\"/> : null}\n                                {closeIcon === true ? <CloseIcon className=\"close\"/> : null}\n                        </IconButton>\n                        <Menu\n                            id=\"menu-hamburger\"\n                            anchorEl={hamburgerAnchor}\n                            keepMounted\n                            open={openHamburger}\n                            onClose={handleHamburgerClose}\n                            PaperProps={{\n                                style: {\n                                     width: \"100%\",\n                                     maxWidth: \"100%\",\n                                     maxHeight: \"100%\",\n                                     left: 0,\n                                     right: 0,\n                                   }\n                                 }}\n                                 marginThreshold={0}\n                        >\n                            <Link className=\"burgerItem\" onClick={handleHamburgerClose} to=\"/\">Home</Link>\n                            <Link className=\"burgerItem\" onClick={handleHamburgerClose} to=\"/Tutorials\">Tutorials</Link>\n                            <Link className=\"burgerItem\" onClick={handleHamburgerClose} to=\"/Schedule\">Schedule</Link>\n                            <Link className=\"burgerItem\" onClick={handleHamburgerClose} to=\"/faq\">FAQ</Link>\n                            <Link className=\"burgerItem\" onClick={handleHamburgerClose} to=\"/contact\">Contact</Link>\n                        </Menu>\n                    </div>\n                    <IconButton edge=\"start\" id=\"logoIcon\" color=\"#00529b\" aria-label=\"menu\">\n                        <img src={logo} alt=\"Logo\" className=\"siteIcon\"/>\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link className=\"navItem\" to=\"/\">Home</Link>\n                    </Typography>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link className=\"navItem\" to=\"/Tutorials\">Tutorials</Link>\n                    </Typography>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link className=\"navItem\" to=\"/Schedule\">Schedule</Link>\n                    </Typography>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link className=\"navItem\" to=\"/faq\">FAQ</Link>\n                    </Typography>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link className=\"navItem\" to=\"/contact\">Contact</Link>\n                    </Typography>\n                        {auth && (\n                           <div>\n                               <IconButton\n                                    aria-label=\"account of current user\"\n                                    aria-controls=\"menu-appbar\"\n                                    aria-haspopup=\"true\"\n                                    onClick={handleProfile}\n                                    color=\"inherit\"\n                                >\n                                    <AccountCircle />\n                                </IconButton>\n                                <Menu\n                                    id=\"menu-appbar\"\n                                    anchorEl={profileAnchor}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                        }}\n                                        keepMounted\n                                        transformOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                    }}\n                                    open={openProfile}\n                                    onClose={handleCloseProfile}\n                                >\n                                    <MenuItem className=\"profileMenu\">{user.firstName + \" \" + user.lastName}</MenuItem>\n                                    <MenuItem className=\"profileMenu\"><Link to=\"/profile\" className=\"profileLink\">Profile</Link></MenuItem>\n                                    <MenuItem className=\"profileMenu\"><Link to=\"/settings\" className=\"profileLink\">Settings</Link></MenuItem>\n                                    <MenuItem className=\"profileMenu\" onClick={handleLogout}>Log Out</MenuItem>\n                                </Menu>\n                           </div> \n                        )}\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/pharmContact/pharmContact.js",[],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/patientSchedule/patientSchedule.js",["216","217","218","219","220","221","222"],"import React, {useState, useEffect, useContext} from \"react\";\nimport { UserContext } from \"../../UserContext\";\nimport { TutorialContext } from \"../../TutorialContext\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ScheduleEvent from \"../../components/scheduleEvent/scheduleEvent\";\nimport './patientSchedule.css';\n\nexport default function PatientSchedule(){\n\n    const {user, setUser} = useContext(UserContext);\n    const getCurrentDay = (day) => {\n        let numDate = day.substr(-2);\n        let newDate = new Date(day);\n        switch (newDate.getDay()){\n            case 0:\n                return [\"Mo\", numDate, \"Monday\"];\n            case 1:\n                return [\"Tu\", numDate, \"Tuesday\"];\n            case 2: \n                return [\"We\", numDate, \"Wednesday\"];\n            case 3:\n                return [\"Th\", numDate, \"Thursday\"];\n            case 4:\n                return [\"Fr\", numDate, \"Friday\"];\n            case 5:\n                return [\"Sa\", numDate, \"Saturday\"];\n            case 6:\n                return [\"Su\", numDate, \"Sunday\"];\n        }\n    }\n    const [currentDay, setCurrentDay] = useState(null);\n    const [days, setDays] = useState([]);\n    const [render, setRender] = useState(false);\n    const [earliest, setEarliest] = useState(days[0]);\n    const [todaysSchedule, setTodaysSchedule] = useState([]);\n\n    let week = [];\n    useEffect(() => {\n        let curr = new Date(new Date()); // get current date  \n        let first = curr.getDate() - curr.getDay(); // First day is the  day of the month - the day of the week  \n        let firstday = new Date(curr.setDate(first)).toISOString().slice(0,10); \n        week = [firstday];\n        for (let i=0; i<7; i++){\n            week.push(new Date(curr.setDate(curr.getDate()+1)).toISOString().slice(0,10));\n        }\n        setDays(week);\n        setRender(true);\n        setTodaysSchedule(getTodaysSchedule(new Date().toLocaleString(\"en-US\", {timeZone: \"America/Los_Angeles\"})));\n        setCurrentDay(getCurrentDay(new Date().toLocaleString(\"en-US\", {timeZone: \"America/Los_Angeles\"}))[2]);\n    }, []);    \n\n    \n\n    const getCurrentMonth = (month) => {\n        switch (month) {\n            case 0:\n                return \"January\";\n            case 1:\n                return \"February\";\n            case 2: \n                return \"March\";\n            case 3:\n                return \"April\";\n            case 4:\n                return \"May\";\n            case 5:\n                return \"June\";\n            case 6:\n                return \"July\";\n            case 7:\n                return \"August\";\n            case 8:\n                return \"September\";\n            case 9:\n                return \"October\";\n            case 10:\n                return \"November\";\n            case 11:\n                return \"December\";\n        }\n    }\n\n    // left arrow, decrement all current dates by one week\n    const handleNextDay = () => {\n        let week = days;\n        let newDate = new Date(week[week.length-1]);\n        let nextDay = new Date(newDate.getTime()+86400000).toISOString().slice(0,10);\n        week.push(nextDay);\n        week.shift();\n        setDays(week);\n        setEarliest(days[0]);\n    }\n    // right arrow, increment all current dates by one week\n    const handlePrevDay = () => {\n        let week = days;\n        let newDate = new Date(week[0]);\n        let prevDay = new Date(newDate.setDate(newDate.getDate()-1)).toISOString().slice(0,10);\n        week.pop();\n        week.unshift(prevDay);\n        setDays(week);\n        setEarliest(days[0]);\n    }\n\n    const getDayIndex = (dayID) => {\n        switch (dayID){\n            case \"dayOne\":\n                return 0;\n            case \"dayTwo\":\n                return 1;\n            case \"dayThree\":\n                return 2;\n            case \"dayFour\":\n                return 3;\n            case \"dayFive\":\n                return 4;\n            case \"daySix\":\n                return 5;\n            case \"daySeven\":\n                return 6;\n        }\n    }\n\n    const dayMonthYear = (date) => {\n        let dd = String(date.getDate());\n        let mm = String(date.getMonth());\n        let yy = String(date.getFullYear());\n        let dateString = `${mm}/${dd}/${yy}`;\n        return dateString;\n    }\n\n    const formatTime = (date) => {\n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n        let ampm = hours >= 12 ? 'pm' : 'am';\n        hours = hours % 12;\n        hours = hours ? hours : 12;\n        minutes = minutes < 10 ? '0'+ minutes: minutes;\n        let strTime = hours + ':' + minutes + ' ' + ampm;\n        return strTime\n    }\n\n    const getTodaysSchedule = (selected) => {\n        let selectedDate = new Date(`${selected} 00:00:00`); //get new date object of a date passed into function\n        let scheduleArr = []; // initialized schedule array\n        for (let i = 0; i < user.events.length; i++){ // iter thru events\n            if (dayMonthYear(selectedDate) ===  dayMonthYear(new Date(user.events[i].notifyAt))){ // compare the selectedDate with date of notifyAt \n                scheduleArr.push(user.events[i]); //push into schedule array\n            }\n        }\n        return scheduleArr;\n    }\n\n    const handleNewCurrentDay = (event) => {\n        let dayIndex = event.target.id; // get day index even if day changes\n        let dayString = days[getDayIndex(dayIndex)]; // get the current date object\n        setCurrentDay(getCurrentDay(dayString)[2]); // change current date to what was selected\n        setTodaysSchedule(getTodaysSchedule(dayString)); // change the schedule output based on the selectedDay\n    }\n\n    return(\n        render === true ? \n        <Grid container className=\"outerScheduleContainer\">\n            <Grid item xs={1}></Grid>\n            <Grid container xs={10} justify=\"center\" direction=\"column\" className=\"gridStyling\">\n                <Typography variant=\"h3\" align=\"center\" className=\"monthStyling\">{getCurrentMonth(new Date(days[0]).getMonth())}</Typography>\n                <Grid className=\"carouselStyling\" direction=\"row\">\n                    <ul className=\"weekDisplay\">\n                    <li className=\"weekDayDisplay \" >\n                            <div onClick={handlePrevDay} className=\"arrowIcon\">&#60;</div>\n                    </li>                        \n                        <li className=\"weekDayDisplay\">\n                                <div className=\"dateContainer\">\n                                    <Typography variant=\"h3\" align=\"center\" className=\"nameDate\">{getCurrentDay(days[0])[0]}</Typography>\n                                    <Typography variant=\"h5\" align=\"center\" className=\"numDate\" id=\"dayOne\" onClick={handleNewCurrentDay}>{getCurrentDay(days[0])[1]}</Typography>\n                                </div>\n                        </li>\n                        <li className=\"weekDayDisplay\">\n                                <div className=\"dateContainer\">\n                                    <Typography variant=\"h3\" align=\"center\" className=\"nameDate\">{getCurrentDay(days[1])[0]}</Typography>\n                                    <Typography variant=\"h5\" align=\"center\" className=\"numDate\" id=\"dayTwo\" onClick={handleNewCurrentDay}>{getCurrentDay(days[1])[1]}</Typography>\n                                </div>\n                        </li>     \n                        <li className=\"weekDayDisplay\">\n                                <div className=\"dateContainer\">\n                                    <Typography variant=\"h3\" align=\"center\" className=\"nameDate\">{getCurrentDay(days[2])[0]}</Typography>\n                                    <Typography variant=\"h5\" align=\"center\" className=\"numDate\" id=\"dayThree\" onClick={handleNewCurrentDay}>{getCurrentDay(days[2])[1]}</Typography>\n                                </div>\n                        </li>     \n                        <li className=\"weekDayDisplay\">\n                                <div className=\"dateContainer\">\n                                    <Typography variant=\"h3\" align=\"center\" className=\"nameDate\">{getCurrentDay(days[3])[0]}</Typography>\n                                    <Typography variant=\"h5\" align=\"center\" className=\"numDate\" id=\"dayFour\" onClick={handleNewCurrentDay}>{getCurrentDay(days[3])[1]}</Typography>\n                                </div>\n                        </li>     \n                        <li className=\"weekDayDisplay\">\n                                <div className=\"dateContainer\">\n                                    <Typography variant=\"h3\" align=\"center\" className=\"nameDate\">{getCurrentDay(days[4])[0]}</Typography>\n                                    <Typography variant=\"h5\" align=\"center\" className=\"numDate\" id=\"dayFive\" onClick={handleNewCurrentDay}>{getCurrentDay(days[4])[1]}</Typography>\n                                </div>\n                        </li>     \n                        <li className=\"weekDayDisplay\">\n                                <div className=\"dateContainer\">\n                                    <Typography variant=\"h3\" align=\"center\" className=\"nameDate\">{getCurrentDay(days[5])[0]}</Typography>\n                                    <Typography variant=\"h5\" align=\"center\" className=\"numDate\" id=\"daySix\" onClick={handleNewCurrentDay}>{getCurrentDay(days[5])[1]}</Typography>\n                                </div>\n                        </li>     \n                        <li className=\"weekDayDisplay\">\n                                <div className=\"dateContainer\">\n                                    <Typography variant=\"h3\" align=\"center\" className=\"nameDate\">{getCurrentDay(days[6])[0]}</Typography>\n                                    <Typography variant=\"h5\" align=\"center\" className=\"numDate\" id=\"daySeven\" onClick={handleNewCurrentDay}>{getCurrentDay(days[6])[1]}</Typography>\n                                </div>\n                        </li>                             \n                        <li className=\"weekDayDisplay\" >\n                            <div onClick={handleNextDay} className=\"arrowIcon\">&#62;</div>\n                        </li>\n                    </ul>\n                </Grid>\n                <Grid className=\"dayContainer\">\n                    <Typography variant=\"h3\" align=\"center\" className=\"dayStyling\">{currentDay}</Typography>\n                    <div className=\"scheduleComponents\">\n                        <br/>\n                        {todaysSchedule.length === 0 ? <Typography variant=\"h4\" color=\"primary\" align=\"center\">No Infusions Today</Typography> : todaysSchedule.map((item => {\n                            return <ScheduleEvent tutorialId={item.tutorialId} time={formatTime(new Date(item.notifyAt))} name={item.title}/>\n                        }))}\n                    </div>\n                </Grid>\n            </Grid>\n            <Grid item xs={1}></Grid>\n        </Grid>\n        : \"loading...\"\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/TutorialPage/tutorial.js",["223","224","225","226","227","228","229","230","231"],"import React, {useState, useEffect, useContext} from \"react\";\nimport { UserContext } from \"../../UserContext\";\nimport {TutorialContext} from \"../../TutorialContext\";\nimport {Grid, Typography, Button} from \"@material-ui/core\";\nimport \"./tutorial.css\"\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport {Card, CardMedia, CardContent} from '@material-ui/core';\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport ReactPlayer from \"react-player\";\nimport Speech from \"react-speech\";\nimport axios from 'axios';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n  };\n  \n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\n  const Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n  \n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background,\n    },\n    buttonContainer: {\n        flexGrow: 1,\n        display: \"flex\",\n        flexDirection: \"row\",\n    },\n    infusionTitleContainer: {\n        width: \"100%\"\n    },\n  }));\n\nexport default function TutorialPage(props){    \n\n    const {user, setUser} = useContext(UserContext);\n    const {tutorial, setTutorial} = useContext(TutorialContext);\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        console.log(tutorial);\n    },[])\n\n    const [value, setValue] = useState(0);\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    }\n\n    const [navValue, setNavValue] = useState(0);\n    const handleNavChange = (event, newValue) => {\n        setNavValue(newValue);\n    }\n\n    const [playing, setPlaying] = useState(false);\n    const handlePause = (event) => {\n        setPlaying(false);\n    }\n\n    const handlePlay = (event) => {\n        setPlaying(true);\n    }\n\n    const [descOpen, setOpenDesc] = React.useState(false);\n    const handleClickOpenDesc = () => {\n        setOpenDesc(true);\n    }\n    const handleCloseDesc = () => {\n        setOpenDesc(false);\n    }\n\n    const [stepOpen, setOpenStep] = React.useState(false);\n    const handleClickOpenStep = () => {\n        setOpenStep(true);\n    };\n    const handleCloseStep = () => {\n        setOpenStep(false);\n    };\n\n    const [notesOpen, setOpenNotes] = React.useState(false);\n    const handleClickOpenNotes = () => {\n        setOpenNotes(true);\n    };\n    const handleCloseNotes = () => {\n        setOpenNotes(false);\n    };\n\n    const [videoCounter, setVideoCounter] = useState(0);\n\n    const handleNextVideo = () => {\n        console.log(tutorial.tutorials);\n        console.log(tutorial.tutorials[videoCounter]);\n        console.log(tutorial.tutorials[videoCounter + 1].video.url);\n        if (videoCounter < tutorial.tutorials.length-1){\n            let newCount = videoCounter + 1;\n            setVideoCounter(newCount);\n        }\n    }\n\n    const handlePrevVideo = () => {\n        if (videoCounter > 0){\n            let newCount = videoCounter - 1;\n            setVideoCounter(newCount);\n        }\n    }\n\n    return(\n        <Grid container>\n            <Grid xs={1}></Grid>\n            <Grid xs={10} container className=\"centralContainer\">\n                <Grid xs={0} md={6} container>\n                    <div className=\"infusionContainer\">\n                        <div>\n                            <Typography variant=\"h5\" align=\"center\" className=\"infusionTitle\">{tutorial.tutorials[videoCounter].name}</Typography>\n                        </div>\n                        <div className=\"videoContainer\">\n                            <ReactPlayer className=\"video\" url={tutorial.tutorials[videoCounter].video.url} playing={playing} onPlay={handlePlay} onPause={handlePause}/>\n                        </div>\n                    </div>\n                    <div className=\"videoAndDesc\">\n                        <div className=\"videoButtonsContainer\">\n                            <Button disabled={videoCounter === 0} variant=\"contained\" className=\"videoButtons\" onClick={handlePrevVideo}><KeyboardArrowLeftIcon/></Button>\n                            <Button variant=\"contained\" className=\"videoButtons\" onClick={playing === false ? handlePlay : handlePause}>{playing === false ? <PlayArrowIcon/> : <PauseIcon/>}</Button>\n                            <Button disabled={videoCounter === tutorial.tutorials.length-1} variant=\"contained\" className=\"videoButtons\" onClick={handleNextVideo}><KeyboardArrowRightIcon/></Button>\n                        </div>\n                        <Typography variant=\"body1\" className=\"description desktopInteraction\">Description: {tutorial.tutorials[videoCounter]['description']}</Typography>\n                    </div>\n                </Grid>\n                <Grid sm={1}></Grid>\n                <Grid xs={0} md={5} container className=\"desktopInteraction\">\n                    <div className={classes.root}>\n                        <div className=\"noteContainer\">\n                            <AppBar position=\"static\" className=\"noteTabs\" fullWidth>\n                                <Tabs value={value} onChange={handleChange} centered className=\"tabsColor\" aria-label=\"simple tabs example\">\n                                    <Tab wrapped label=\"Pharmacist Notes\" {...a11yProps(0)} />\n                                    <Tab wrapped label=\"Text-Only Step List\" {...a11yProps(1)} />\n                                    <Tab wrapped label=\"Infusion Notes\" {...a11yProps(2)} />\n                                </Tabs>\n                            </AppBar>\n                            <TabPanel value={value} index={0}>\n                                <Typography align=\"center\">{tutorial.tutorials[videoCounter]['pharmacistNotes']}</Typography>\n                            </TabPanel>\n                            <TabPanel value={value} index={1}>\n                                <Typography align=\"center\"><ul>{tutorial.tutorials[videoCounter]['stepList'].map(step => {return <li className=\"listItem\">{step}</li>})}</ul></Typography>\n                            </TabPanel>\n                            <TabPanel value={value} index={2}>\n                                <Typography align=\"center\">{tutorial.tutorials[videoCounter]['infusionNotes']}</Typography>\n                            </TabPanel>\n                        </div>\n                        <Button variant=\"contained\" className=\"desktopButtons\">\n                            <Speech\n                            displayText=\"Text-to-Speech\"\n                            textAsButton={true}\n                            text={tutorial.tutorials[videoCounter]['description']} \n                            voice=\"Google UK English Male\"\n                            Text-to-Speech>\n                        </Speech>\n                        </Button>\n                        <Button variant=\"contained\" className=\"desktopButtons\">Download Full Text</Button>\n                    </div>  \n                </Grid>\n            </Grid>\n            <BottomNavigation\n                value={navValue}\n                onChange={handleNavChange}\n                showLabels\n                className=\"bottomNav mobileInteraction\"\n            >\n                <BottomNavigationAction className=\"bottomNavItem\" onClick={handleClickOpenDesc} label=\"Description\"/>\n                <BottomNavigationAction className=\"bottomNavItem\" onClick={handleClickOpenStep} label=\"Step List\"/>\n                <BottomNavigationAction className=\"bottomNavItem\" onClick={handleClickOpenNotes} label=\"Notes\"/>    \n                <BottomNavigationAction className=\"bottomNavItem\" label=\"Download Text\"/>        \n            </BottomNavigation>\n            <Dialog\n                open={descOpen}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleCloseDesc}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Description\"}</DialogTitle>\n                <DialogContent>\n                <DialogContentText id=\"alert-dialog-slide-description\">\n                    {tutorial.tutorials[videoCounter]['description']}\n                </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={handleCloseDesc} color=\"primary\">\n                    Close\n                </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog\n                open={stepOpen}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleCloseStep}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Step List\"}</DialogTitle>\n                <DialogContent>\n                <DialogContentText id=\"alert-dialog-slide-description\">\n                    <ul>{tutorial.tutorials[videoCounter]['stepList'].map(step => {return <li className=\"listItem\">{step}</li>})}</ul>\n                </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={handleCloseStep} color=\"primary\">\n                    Close\n                </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog\n                open={notesOpen}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleCloseNotes}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Notes\"}</DialogTitle>\n                <DialogContent>\n                <DialogContentText id=\"alert-dialog-slide-description\">\n                    <Typography variant=\"h5\" color=\"primary\">Pharmacist Notes:</Typography> \n                    <Typography variant=\"body1\">{tutorial.tutorials[videoCounter]['pharmacistNotes']}</Typography><br/>\n                    <Typography variant=\"h5\" color=\"primary\">Infusion Notes:</Typography>\n                    <Typography variant=\"body1\"> {tutorial.tutorials[videoCounter]['infusionNotes']}</Typography>\n                </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={handleCloseNotes} color=\"primary\">\n                    Close\n                </Button>\n                </DialogActions>\n            </Dialog>\n            <Grid xs={1}></Grid>\n        </Grid> \n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/scheduleEvent/scheduleEvent.js",["232","233","234","235","236","237","238","239","240"],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/notifications/notifications.js",["241"],"import React from \"react\";\nimport './notifications.css';\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\n\nexport default function Notification(props){\n    return(\n        <Card variant=\"outlined\" className=\"cardContainer\">\n            <CardContent className=\"cardContents\">\n                <div className=\"leftCard\">\n                    <Typography variant=\"h6\" color=\"secondary\" align=\"left\">{props.title}</Typography>\n                    <Typography variant=\"subtitle2\" align=\"left\">{props.description}</Typography>\n                </div>\n            </CardContent>\n        </Card>\n    )\n}\n","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/patientProfile/profile.js",["242","243","244"],"import React, {useState, useEffect} from \"react\";\nimport \"./profile.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function PatientProfile(){\n    return(\n        <Grid container className=\"profileContainer\">\n            <Grid item xs={2}></Grid>\n            <Grid item xs={8} justify=\"center\">\n                <div className=\"patientProfileInfo\">\n                    <Typography align=\"center\" variant=\"h3\" className=\"patientName\">Jasmine Miller</Typography>\n                    <Typography align=\"center\" variant=\"h4\">Pharmacy: </Typography>\n                    <Typography align=\"center\" variant=\"h4\">Phone Number: </Typography>\n                </div>\n                <div className=\"infusionSummaryContainer\">\n                    <Typography align=\"center\" variant=\"h4\">Summary of Infusion</Typography>\n                    <div className=\"infusionSummary\">\n                        Notes from pharmacist here\n                    </div>\n                </div>\n            </Grid>\n            <Grid item xs={2}></Grid>\n        </Grid>\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/pharmTutorialList/pharmTutorialList.js",["245","246","247","248","249","250","251","252","253","254","255","256"],"import React, { useEffect, useState, useContext } from 'react';\nimport {PatientContext} from \"../../PatientContext\";\nimport {UserContext} from \"../../UserContext\";\nimport {TutorialContext} from \"../../TutorialContext\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport Grid from '@material-ui/core/Grid';\nimport {Button} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nconst useStyles = makeStyles((theme) => ({\n    box:{\n        width :'100%',\n        height: '100vh',\n        display: 'inline-block',\n    },\n    root: {\n        display:'inline-block',\n        // float:'left',\n        margin:'2vw',\n        marginLeft: '8vw',\n        backgroundColor: '#3F51B5',\n        width: \"35vw\",\n        height: \"216px\",\n        marginTop: '33px',\n        borderRadius: 20,\n        color: 'white',\n        backgroundColor: '#00529b',\n    },\n    details: {\n        verticalAlign:'top',\n        display: 'inline-block',\n        width: '60%',\n    },\n    content: {\n        flex: '1 0 auto',\n\n        marginTop: 25,\n        marginLeft: 3,\n    },\n    buttonContent: {\n        flex: '1 0 auto',\n        justify: 'center',\n        marginLeft: '7.5vw',\n        marginTop: '7vh'\n    },\n    cover: {\n        marginTop:'4%',\n        width: '20%',\n        height: 150,\n        display:'inline-block',\n        margin: 'auto 31px',\n        marginRight: 0,\n    },\n    summary: {\n        //marginBottom: 30,\n        overflowY: 'hidden',\n        height: '80px',\n    },\n    playIcon: {\n        height: 38,\n        width: 38,\n    },\n    btn: {\n        display:'inline-block',\n        verticalAlign:'top',\n        fontSize: 40,\n        width:'10%',\n        marginTop:'80px',\n    },\n    formButtons: {\n        width: '17vw',\n        height: '6vw',\n        color: 'white',\n        cursor: 'pointer',\n        fontSize: '10rem',\n        marginTop: '-10vh'\n    }\n}));\nexport default function PharmTutorialList(){\n    const classes = useStyles();\n    const {patient, setPatient} = useContext(PatientContext); // current patient in focus, context\n    const {user, setUser} = useContext(UserContext);\n    const {tutorial, setTutorial} = useContext(TutorialContext);\n    const [tutorialArchive, setArchive] = useState([]);\n    const [tutorialName, setTutorialName] = useState(\"\");\n    const [tutorialDescription, setTutorialDescription] = useState(\"\");\n    const [tutorialDuration, setTutorialDuration] = useState(\"\");\n    const [tutorialPlaylist, setTutorialPlaylist] = useState([\n        {\n        \"name\": \"\", \n        \"description\": \"\", \n        \"pharmacistNotes\": \"\", \n        \"infusionNotes\": \"\", \n        \"stepList\": \"\", \n        \"video\": \n            {\"url\": \"\", \"order\":\"\", \"videoDescription\":\"\", \"thumbnail\":\"\"}\n        },]);\n    const [gridBools, setGridBools] = useState([\"false\"])\n    const [openTutorialForm, setOpenTutorialForm] = useState(false);\n    const [openTutorialFormTwo, setOpenTutorialFormTwo] = useState(false);\n    const [tutorialSelect, setTutorialSelect] = useState(null);\n    const [openTutorialPrompt, setTutorialPrompt] = useState(false);\n\n    const handleTutorialPrompt = (event) => {\n        tutorialArchive.map(tutorial => {\n            if (tutorial._id === event.target.id){\n                setTutorialSelect(tutorial.name);\n                setTutorial(tutorial);\n            }\n        })\n        setTutorialPrompt(!openTutorialPrompt);\n    }\n    const handleTutorialForm = () => {\n        setOpenTutorialForm(!openTutorialForm);\n    }\n    const handleTutorialFormTwo = () => {\n        setOpenTutorialForm(!openTutorialForm);\n        setOpenTutorialFormTwo(!openTutorialFormTwo);\n    }\n    const handleTutorialName = (event) => {\n        setTutorialName(event.target.value);\n    }\n    const handleTutorialDescription = (event) => {\n        setTutorialDescription(event.target.value);\n    }\n    const handleTutorialDuration = (event) => {\n        setTutorialDuration(event.target.value);\n    }\n    const handleChangeInput = (index, event) => {\n        const values = [...tutorialPlaylist];\n        if (event.target.name === \"url\" || event.target.name === \"videoDescription\"){\n            values[index][\"video\"][event.target.name] = event.target.value\n        }\n        else {values[index][event.target.name] = event.target.value;}\n        setTutorialPlaylist(values);\n        console.log(tutorialPlaylist);\n    }\n    const parseThumbnail = (url) => {\n        let https = url.slice(0, 8); // https://\n        let site = `img.youtube.com/vi/`; // img.youtube.com/vi/\n        let keyStartIndex = url.length-11;\n        let videoKey = url.slice(keyStartIndex); // 11 char key\n        let thumbnailRes = '/maxresdefault.jpg';\n\n        return `${https}${site}${videoKey}${thumbnailRes}`;\n    }\n\n    const handleAddTutorialField = () => {\n        setTutorialPlaylist([...tutorialPlaylist, \n            {\"name\": \"\", \"description\": \"\", \"pharmacistNotes\": \"\", \"infusionNotes\": \"\", \n            \"stepList\": \"\", \n            \"video\": \n                {\"url\": \"\", \"order\":\"\", \"videoDescription\":\"\", \"thumbnail\":\"\"}\n            },])\n    }\n\n    const handleRemoveFields = (index) => {\n        console.log(index);\n        const values = [...tutorialPlaylist];\n        values.splice(index, 1);\n        setTutorialPlaylist(values);\n    }\n\n    const toggleGridBools = (index) => {\n        const values = [...gridBools];\n        values[index] = !values[index];\n        setGridBools(values);\n    }\n\n    const handleAddPatientTutorial = () => {\n        const values = {\n            name: tutorialName,\n            description: tutorialDescription,\n            duration: tutorialDuration,\n            tutorials: [...tutorialPlaylist]\n            }\n        for (let i = 0; i < values[\"tutorials\"].length; i++){\n            values[\"tutorials\"][i][\"stepList\"] = values[\"tutorials\"][i][\"stepList\"].split(';');\n            values[\"tutorials\"][i][\"video\"][\"order\"] = i;\n            values[\"tutorials\"][i][\"video\"][\"thumbnail\"] = parseThumbnail(values[\"tutorials\"][i][\"video\"][\"url\"]);\n        }\n        axios.post(`http://localhost:5000/tutorials/add`, values).then(res => {\n            console.log(res);\n        });\n        setOpenTutorialFormTwo(!openTutorialFormTwo);\n    }\n\n    useEffect ( () => {\n        axios.get('http://localhost:5000/tutorials/all').then(res => {\n            setArchive(res.data);\n        })\n    },[])\n\n        return <div className={classes.box}>\n            <Card className={classes.root}>\n                <CardContent className={classes.buttonContent}>\n                    <Typography variant=\"h1\" className={classes.formButtons} onClick={handleTutorialForm} align=\"center\">+</Typography>\n                </CardContent>\n            </Card>\n            {tutorialArchive.length !== 0 ? tutorialArchive.map((item) => {\n                return  <Card className={classes.root}>\n                            <CardMedia\n                                className={classes.cover}\n                                image={item.tutorials[0].video.thumbnail}\n                                title=\"Live from space album cover\"\n                            />\n                            <div className={classes.details}>\n                                <CardContent className={classes.content}>\n                                    <Typography component=\"h5\" variant=\"h5\">\n                                        {item.name}\n                                    </Typography>\n                                    <Typography className={classes.summary} variant=\"subtitle1\" >\n                                        {item.description}\n                                    </Typography>\n                                    <Typography variant=\"subtitle1\" >\n                                        Duration: {item.duration}\n                                    </Typography>\n                                </CardContent>\n                            </div>\n                            <ArrowForwardIosIcon onClick={handleTutorialPrompt} id={item._id} className={classes.btn}></ArrowForwardIosIcon>\n                        </Card>\n            })\n        : \"Loading...\"}\n        <Dialog\n            open={openTutorialForm}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={handleTutorialForm}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n        >\n            <DialogTitle>Add Tutorial Form - Playlist Summary</DialogTitle>\n                <DialogContent>\n                <DialogContentText>\n                    <TextField name=\"tutorialName\" label=\"Tutorial Name\" variant=\"outlined\" value={tutorialName} onChange={handleTutorialName} fullWidth required />\n                    <TextField name=\"tutorialDescription\" label=\"Tutorial Description\" variant=\"outlined\" value={tutorialDescription} onChange={handleTutorialDescription} fullWidth required />\n                    <TextField name=\"tutorialDuration\" label=\"Tutorial Duration\" variant=\"outlined\" value={tutorialDuration} onChange={handleTutorialDuration} fullWidth required />\n                </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={handleTutorialForm} color=\"primary\">\n                    Close\n                </Button>\n                <Button onClick={handleTutorialFormTwo} variant=\"contained\" color=\"primary\">\n                    Next\n                </Button>\n                </DialogActions>\n        </Dialog>\n        <Dialog\n            open={openTutorialFormTwo}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={handleTutorialFormTwo}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n        >\n            <DialogTitle>Add Tutorial Form - Playlist Videos</DialogTitle>\n                <DialogContent>\n                <DialogContentText>\n                {tutorialPlaylist.map((video, index) => {\n                        return <Grid container>\n                        {gridBools[index] === false ? <Grid xs={11}>\n                            <Typography variant=\"subtitle2\" fullWidth>{`${video.name === \"\" ? \"New Video\" : video.name }`}</Typography>\n                            <TextField className=\"videoInput\" required fullWidth name=\"name\" label=\"Name of Video\" variant=\"outlined\" value={video.name} onChange={event => handleChangeInput(index, event)}/>\n                            <TextField className=\"videoInput\" required fullWidth name=\"description\" label=\"Video description\" variant=\"outlined\" value={video.description} onChange={event => handleChangeInput(index, event)}/>\n                            <TextField className=\"videoInput\" required fullWidth name=\"pharmacistNotes\" label=\"Pharmacist Notes\" variant=\"outlined\" value={video.pharmacistNotes} onChange={event => handleChangeInput(index, event)}/>\n                            <TextField className=\"videoInput\" required fullWidth name=\"infusionNotes\" label=\"Infusion Notes\" variant=\"outlined\" value={video.infusionNotes} onChange={event => handleChangeInput(index, event)}/>\n                            <TextField className=\"videoInput\" required fullWidth name=\"stepList\" label=\"Instructions separated by a semi-colon\" variant=\"outlined\" value={video.stepList} onChange={event => handleChangeInput(index, event)}/>\n                            <TextField className=\"videoInput\" required fullWidth name=\"url\" label=\"Single Youtube Video URL\" variant=\"outlined\" value={video.video.url} onChange={event => handleChangeInput(index, event)}/>\n                            <TextField className=\"videoInput\" required fullWidth name=\"videoDescription\" label=\"Description of video\" variant=\"outlined\" value={video.video.description} onChange={event => handleChangeInput(index, event)}/>\n                        </Grid> : <Grid xs={11}><Typography variant=\"subtitle2\" fullWidth>{`${video.name === \"\" ? \"New Video\" : video.name }`}</Typography></Grid>}\n                        {gridBools[index] === false ? <Grid xs={1}><Button onClick={() => toggleGridBools(index)}><ExpandMoreIcon/></Button></Grid> :\n                        <Grid xs={1}>\n                            <Button onClick={() => toggleGridBools(index)}><KeyboardArrowRightIcon/></Button>\n                            <Button disabled={tutorialPlaylist.length === 1} onClick={() => handleRemoveFields(index)}><RemoveIcon/></Button>\n                            <Button onClick={handleAddTutorialField}><AddIcon/></Button>\n                        </Grid>}\n                        </Grid>\n                    })}\n                </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={handleTutorialFormTwo} color=\"primary\">\n                    Back\n                </Button>\n                <Button onClick={handleAddPatientTutorial} variant=\"contained\" color=\"primary\">\n                    Submit\n                </Button>\n                </DialogActions>\n        </Dialog>\n        <Dialog\n            open={openTutorialPrompt}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={handleTutorialPrompt}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n        >\n            <DialogTitle>Tutorial Select</DialogTitle>\n            <DialogContent>\n            <DialogContentText>\n                <Typography>Go to {tutorialSelect} Tutorial? </Typography>\n            </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={handleTutorialPrompt} color=\"primary\">\n                Close\n            </Button>\n            <Link to=\"/tutorialPage\"><Button disabled={tutorial === null} variant=\"contained\" color=\"primary\">\n                View\n            </Button></Link> \n            </DialogActions>\n        </Dialog>\n        </div>\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/pharmAssignPage/pharmAssign.js",["257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272"],"import React, { useState, useEffect, useContext } from \"react\";\nimport {UserContext} from \"../../UserContext\";\nimport {PatientContext} from \"../../PatientContext\";\nimport { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles';\nimport { Grid } from \"@material-ui/core\"\nimport { Typography } from \"@material-ui/core\"\nimport ScheduleEvent from \"../../components/scheduleEvent/scheduleEvent\";\nimport Notifications from \"../../components/notifications/notifications\";\nimport { makeStyles, useTheme, withTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport axios from 'axios';\nimport './pharmAssign.css'\nimport { set } from \"date-fns\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: { flexGrow: 1, },\n    box: {\n        display: 'flex',\n        backgroundColor: '#3F51B5',\n        width: \"90%\",\n        height: \"200px\",\n        margin: '0 auto',\n        marginTop: '33px',\n        borderRadius: 20,\n        color: 'white',\n        backgroundColor: '#00529b',\n        textAlign: 'left',\n        fontSize: '14px',\n    },\n    details: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: '60%',\n    },\n    content: {\n        flex: '1 0 auto',\n        marginTop: 5,\n        marginLeft: 3,\n    },\n    cover: {\n        width: 100,\n        height: 100,\n        margin: 'auto 31px',\n        marginRight: 0,\n    },\n    summary: {\n        //marginBottom: 30,\n        overflowY: 'hidden',\n    },\n    playIcon: {\n        height: 38,\n        width: 38,\n    },\n}));\n\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n\nconst TutorialsList = ()=>{\n    const {patient, setPatient} = useContext(PatientContext);\n    const classes = useStyles();\n   return <>{patient !== null ? patient.infusionArray.map((item) => {\n        return <Card className={classes.box}>\n            <CardMedia\n                className={classes.cover}\n                image={item.tutorials[0].video.thumbnail}\n                title=\"Live from space album cover\"\n            />\n            <div className={classes.details}>\n                <CardContent className={classes.content}>\n                    <Typography component=\"h6\" variant=\"h6\">\n                        {item.name}\n                    </Typography>\n                    <Typography className={classes.summary} variant=\"subtitle1\" >\n                        {item.description}\n                    </Typography>\n                    <Typography variant=\"subtitle1\" >\n                        Duration: {item.duration}\n                    </Typography>\n                </CardContent>\n            </div>\n            <ArrowForwardIosIcon className=\"arrowIcon\" style={{border:'none'}}></ArrowForwardIosIcon>\n        </Card>\n    }):\"Loading...\"}</>\n}\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nexport default function PharmAssign() {\n    const classes = useStyles();\n    const {user, setUser} = useContext(UserContext); // pharmacist account context\n    const {patient, setPatient} = useContext(PatientContext); // current patient in focus, context\n    const [todaysSchedule, setTodaysSchedule] = useState([]); // today's schedule for the patient\n    const [selectedArchive, setSelectedArchive] = useState(null);\n    // Dialog States\n    const [openEventForm, setOpenEventForm] = useState(false);\n    const [openTutorialForm, setOpenTutorialForm] = useState(false);\n    const [openTutorialFormTwo, setOpenTutorialFormTwo] = useState(false);\n    const [openDeleteEventForm, setOpenDeleteEventForm] = useState(false);\n    // Delete Event States\n    const [eventId, setEventId] = useState(\"\");\n    // Add Event States\n    const [eventTitle, setEventTitle] = useState(\"\");\n    const [eventDescription, setEventDescription] = useState(\"\");\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [selectedTime, setSelectedTime] = useState(new Date());\n    const [patientEvents, setPatientEvents] = useState([]);\n    // Tutorial States\n    const [selectedTutorial, setSelectedTutorial] = useState(\"\");\n    const [deleteTutorialForm, setDeleteTutorialForm] = useState(false);\n    const [patientTutorials, setPatientTutorials] = useState([]);\n    const [addTutorial, setAddTutorial] = useState(\"\");\n    const [availableTutorials, setAvailableTutorials] = useState([]);\n    // Notification States\n    const [openAddNotification, setOpenAddNotification] = useState(false);\n    const [openDeleteNotification, setOpenDeleteNotification] = useState(false);\n    const [selectedNotification, setSelectedNotification] = useState(\"\");\n    const [notifTitle, setNotifTitle] = useState(\"\");\n    const [notifDescription, setNotifDescription] = useState(\"\");\n    const handleNotifTitle = (event) => {\n        setNotifTitle(event.target.value);\n    }\n    const handleNotifDescription = (event) => {\n        setNotifDescription(event.target.value);\n    }\n    const handleSelectedNotification = (event) => {\n        setSelectedNotification(event.target.value);\n    }\n    const handleAddNotificationForm = () => {\n        setOpenAddNotification(!openAddNotification);\n    }\n    const handleDeleteNotificationForm = () => {\n        setOpenDeleteNotification(!openDeleteNotification);\n    }\n    const handleAddNotifications = () => {\n        let pastNotifs = patient.notification;\n        let notificationObj = { \"notification\" : [{\n            title: notifTitle,\n            description: notifDescription\n        }]}\n        pastNotifs.map((notif) => {\n            notificationObj[\"notification\"].push(notif);\n        })\n        axios.post(`http://localhost:5000/patients/updateNotification/${patient._id}`, notificationObj);\n        setOpenAddNotification(!openAddNotification);\n    }\n    const handleDeleteNotifications = () => {\n        let pastNotifs = patient.notification;\n        let notificationObj = { \"notification\" : []}\n        pastNotifs.map((notif) => {\n            if (notif._id !== selectedNotification){\n                notificationObj[\"notification\"].push(notif);\n            }\n        })\n        axios.post(`http://localhost:5000/patients/updateNotification/${patient._id}`, notificationObj);\n        setOpenDeleteNotification(!openDeleteNotification);\n    }\n    // Patient Checkin States\n    const [openCheckinForm, setOpenCheckinForm] = useState(false);\n    const [newCheckinDate, setNewCheckinDate] = useState(new Date());\n    const [newCheckinTime, setNewCheckinTime] = useState(new Date());\n    const [updateRecentCheck, setUpdateRecentCheck] = useState(\"\");\n\n    const handleCheckinForm = () => {\n        setOpenCheckinForm(!openCheckinForm);\n    }\n    const handleNewCheckinDate = (date) => {\n        setNewCheckinDate(date);\n    }\n    const handleNewCheckinTime = (date) => {\n        setNewCheckinTime(date);\n    }\n    const handleUpdateCheck = (event) => {\n        setUpdateRecentCheck(event.target.value);\n    }\n    const updateCheckin = () => {\n        let dateObj = (`${dayMonthYear(newCheckinDate)} ${newCheckinTime.toLocaleTimeString(navigator.language, {\n            hour: '2-digit',\n            minute:'2-digit'\n          })}`);\n        let nextCheckObj = {\"nextCheckIn\": new Date(dateObj)}\n        if (updateRecentCheck === \"yes\"){\n            let newRecentCheck = patient.nextCheckIn;\n            let recentCheckObj = { \"recentCheckIn\" : new Date(newRecentCheck) }\n            console.log(recentCheckObj);\n            axios.post(`http://localhost:5000/patients/updateRecentCheckin/${patient._id}`, recentCheckObj).then(res => {\n                console.log(res);\n            });\n        }\n        axios.post(`http://localhost:5000/patients/updateCheckin/${patient._id}`, nextCheckObj).then(res => {\n            console.log(res);\n        });\n        //setOpenCheckinForm(!openCheckinForm); \n        console.log(nextCheckObj);\n    }\n    // Patient Infusion Type States\n    const [infusionType, setInfusionType] = useState(\"\");\n    const [openTypeForm, setOpenTypeForm] = useState(false);\n\n    const handleInfusionType = (event) => {\n        setInfusionType(event.target.value);\n    }\n    const handleOpenTypeForm = () => {\n        setOpenTypeForm(!openTypeForm);\n    }\n\n    const handleUpdateType = () => {\n        console.log(infusionType);\n        console.log(infusionType.split(';'));\n        const value = { \"infusionType\": infusionType.split(';')}\n        axios.post(`http://localhost:5000/patients/updateInfusionType/${patient._id}`, value).then(res => {\n            console.log(res);\n        })\n        setOpenTypeForm(!openTypeForm);\n    }\n    // Patient Info States\n    const [infoSelection, setInfoSelection] = useState(\"Schedule\");\n    const handleInfoSelection = (event) => {\n        setInfoSelection(event.target.value);\n    }\n\n    const theme = useTheme();\n\n    const formatTime = (date) => {\n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n        let ampm = hours >= 12 ? 'pm' : 'am';\n        hours = hours % 12;\n        hours = hours ? hours : 12;\n        minutes = minutes < 10 ? '0'+ minutes: minutes;\n        let strTime = hours + ':' + minutes + ' ' + ampm;\n        return strTime\n    }\n    const dayMonthYear = (date) => {\n        let dd = String(date.getDate());\n        let mm = String(date.getMonth()+1);\n        let yy = String(date.getFullYear());\n        let dateString = `${mm}/${dd}/${yy}`;\n        return dateString;\n    }\n    const getTodaysSchedule = () => {\n        let today = new Date();\n        let scheduleArr = [];\n        for (let i = 0; i < patient.events.length; i++){\n            if (dayMonthYear(today) ===  dayMonthYear(new Date(patient.events[i].notifyAt))){\n                scheduleArr.push(patient.events[i]);\n            }\n        }\n        return scheduleArr;\n    }\n\n    /*\n    * Event handlers for event object state\n    */\n    const handleTitleChange = (event) => {\n        setEventTitle(event.target.value);\n    }\n    const handleDescriptionChange = (event) => {\n        setEventDescription(event.target.value);\n    }\n    const handleSelectedDate = (date) => {\n        setSelectedDate(date);\n    }\n    const handleSelectedTime = (date) => {\n        setSelectedTime(date);\n    }\n    const handleNewEventId = (event) => {\n        setEventId(event.target.value);\n    }\n\n    const handleEventForm = () => {\n        setOpenEventForm(!openEventForm);\n    }\n    const handleTutorialForm = () => {\n        setOpenTutorialForm(!openTutorialForm);\n    }\n\n    const handleDeleteEventForm = () => {\n        setOpenDeleteEventForm(!openDeleteEventForm);\n    }\n    const handleAddPatientEvent = () => {\n        let dateObj = (`${dayMonthYear(selectedDate)} ${selectedTime.toLocaleTimeString(navigator.language, {\n            hour: '2-digit',\n            minute:'2-digit'\n          })}`);\n        let patientEventsArr = patient.events;  \n        const event = {\n            \"events\": [\n                {\n                title: eventTitle,\n                start: dateObj,\n                end: dateObj,\n                notifyAt: dateObj,\n                description: eventDescription,\n                tutorialId: selectedArchive\n                }\n            ]}\n        patientEventsArr.map(item => {\n            event[\"events\"].unshift(item);\n        })  \n        axios.post(`http://localhost:5000/patients/updateEvents/${patient._id}`, event).then(res => {\n        })\n        handleEventForm();\n    }\n    const handleDeletePatientEvent = () => {\n        let patientEventsArr = patient.events;\n        const event = {\"events\": []}\n        patientEventsArr.map(item => {\n            if (item._id !== eventId){\n                event[\"events\"].push(item);\n            }\n        })\n        axios.post(`http://localhost:5000/patients/updateEvents/${patient._id}`, event).then(res => {\n        })\n        handleDeleteEventForm();\n    }\n\n    const handleSelectedArchive = (event) => {\n        setAddTutorial(event.target.value);\n    }\n\n    const handleAddPatientTutorial = () => {\n        // get current infusion array of patient, add the selected one, post to route\n        let currentArr = patient.infusionArray;\n        currentArr.push(addTutorial);\n        let values = { \"infusionArray\": currentArr }\n        axios.post(`http://localhost:5000/patients/updateInfusion/${patient._id}`, values);\n        setOpenTutorialFormTwo(!openTutorialFormTwo);\n    }\n    const handleDeleteTutorialForm = () => {\n        setDeleteTutorialForm(!deleteTutorialForm);\n    }\n    const handleDeletePatientTutorial = () => {\n        let patientTutorialsArr = patient.infusionArray;\n        const values = {\"infusionArray\": []}\n        patientTutorialsArr.map(item => {\n            if (item._id !== selectedTutorial){\n                values[\"infusionArray\"].push(item);\n            }\n        })\n        axios.post(`http://localhost:5000/patients/updateInfusion/${patient._id}`, values);\n        handleDeleteTutorialForm();\n    }\n\n    const handleNewTutorialId = (event) => {\n        setSelectedTutorial(event.target.value);\n    }\n\n    const handleNewArchive = (event) => {\n        setSelectedArchive(event.target.value);\n    }\n\n    useEffect(() => {\n        setTodaysSchedule(getTodaysSchedule);\n        if (patient.hasOwnProperty('events')){\n            setPatientEvents(patient.events);\n        }\n        else {\n            setPatientEvents([]);\n        }\n        if (patient.hasOwnProperty('infusionArray')){\n            setPatientTutorials(patient.infusionArray)\n        }\n        else {\n            setPatientTutorials([]);\n        }\n        axios.get('http://localhost:5000/tutorials/all').then(res => {\n            setAvailableTutorials(res.data);\n        })\n\n    },[])\n\n    return (\n        <div className={classes.root}>\n            <ThemeProvider theme={theme}>\n                <Grid container justify=\"center\" spacing={0}>\n                    <Grid item xs={8} sm={8} md={5} className=\"assignPageContainer\">\n                        <div>\n                            <div style={{ textAlign: \"left\", height: '30vh' }}>\n                                <br />\n                                <Typography variant=\"h2\">{patient !== null ? `${patient.firstName} ${patient.lastName}` : \"No User Selected\"}</Typography>\n                                <br />\n                                <br />\n                                <br />\n                                <Typography variant=\"h6\">Phone: {patient !== null ? `(${patient.phoneNumber.slice(0,3)}) ${patient.phoneNumber.slice(3,6)}-${patient.phoneNumber.slice(6)}` : \"Loading...\"}</Typography>\n                                <Typography variant=\"h6\">Email: {patient !== null ? patient.email : \"Loading...\"}</Typography>\n                            </div>\n                            <div className=\"\">\n                                <div className=\"assignNotificationLabel\">\n                                    <FormControl >\n                                            <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            value={infoSelection}\n                                            onChange={handleInfoSelection}\n                                            className=\"labelSelect\"\n                                            >\n                                                <MenuItem value=\"Schedule\">Schedule</MenuItem>\n                                                <MenuItem value=\"Notifications\">Notifications</MenuItem>\n                                                <MenuItem value=\"Checkins\">Check Ins</MenuItem>\n                                                <MenuItem value=\"Infusion Type\">Infusion Type</MenuItem>\n                                            </Select>\n                                        </FormControl> \n                                        {infoSelection === \"Schedule\"? <span><Button variant=\"outlined\" className=\"addMinusBtns\" onClick={handleEventForm}><AddIcon/></Button>\n                                        <Button variant=\"outlined\" className=\"addMinusBtns\" onClick={handleDeleteEventForm}><RemoveIcon/></Button></span> : null}\n                                        {infoSelection === \"Notifications\"? <span><Button variant=\"outlined\" className=\"addMinusBtns\" onClick={handleAddNotificationForm}><AddIcon/></Button>\n                                        <Button variant=\"outlined\" className=\"addMinusBtns\" onClick={handleDeleteNotificationForm}><RemoveIcon/></Button></span> : null}\n                                        {infoSelection === \"Checkins\"? <span><Button variant=\"outlined\" className=\"addMinusBtns\" onClick={handleCheckinForm}>Update Check-in Date</Button></span> : null}\n                                        {infoSelection === \"Infusion Type\"? <span><Button variant=\"outlined\" className=\"addMinusBtns\" onClick={handleOpenTypeForm}>Update Infusion Type</Button></span> : null}\n                                </div>\n                                {infoSelection === \"Schedule\" ? <div className=\"assignNotificationContainer\">\n                                {todaysSchedule.length === 0 ? <Typography variant=\"h4\" align=\"center\" className=\"noInfusions\">No Infusions Today</Typography> \n                                : todaysSchedule.map((item => {\n                                    return <ScheduleEvent time={formatTime(new Date(item.notifyAt))} name={item.title}/>\n                                }))}\n                                </div> : null }\n                                {infoSelection === \"Notifications\" ? <div className=\"assignNotificationContainer\">\n                                    {patient.notification.length === 0 ? <Typography variant=\"h4\" align=\"center\" className=\"noInfusions\">No Notifications</Typography> \n                                    : patient.notification.map((notif) => {\n                                        return <Notifications title={notif.title} description={notif.description}/>\n                                    }) }\n                                </div> : null}\n                                {infoSelection === \"Checkins\" ? <div className=\"assignNotificationContainer\">\n                                    {patient.hasOwnProperty('recentCheckIn') ? <Typography className=\"recentCheckin\" variant=\"h5\" align=\"center\" color=\"primary\">{`Recently checked: ${dayMonthYear(new Date(patient.recentCheckIn))} ${new Date(patient.recentCheckIn).toLocaleTimeString(navigator.language, {\n                                        hour: '2-digit',\n                                        minute:'2-digit'\n                                    })}`}</Typography> : <Typography className=\"recentCheckin\" variant=\"h5\" align=\"center\" color=\"primary\">Patient has not been visited yet.</Typography>}\n                                    {patient.hasOwnProperty('nextCheckIn') ? <Typography className=\"recentCheckin\" variant=\"h5\" align=\"center\" color=\"primary\">{`Next check-in is: ${dayMonthYear(new Date(patient.nextCheckIn))} ${new Date(patient.nextCheckIn).toLocaleTimeString(navigator.language, {\n                                        hour: '2-digit',\n                                        minute:'2-digit'\n                                    })}`}</Typography> : <Typography className=\"recentCheckin\" variant=\"h5\" align=\"center\" color=\"primary\">No future checkup has been set.</Typography>}\n                                    {patient.hasOwnProperty('recentCheckIn') === false && patient.hasOwnProperty('nextCheckIn') === false ? <Typography className=\"recentCheckin\" variant=\"h5\" align=\"center\" color=\"primary\">Please schedule their next check in.</Typography> : null} \n                                </div> : null}\n                                {infoSelection === \"Infusion Type\" ? <div className=\"assignNotificationContainer\">\n                                    {patient.hasOwnProperty('infusionType') ? patient.infusionType.map(type => {\n                                        return <Typography className=\"recentCheckin\" variant=\"h5\" align=\"center\" color=\"primary\">{type}</Typography>\n                                    }) : <Typography className=\"recentCheckin\" variant=\"h5\" align=\"center\" color=\"primary\">No Type Set.</Typography>}\n                                </div> : null}\n                                <Dialog\n                                    open={openAddNotification}\n                                    TransitionComponent={Transition}\n                                    keepMounted\n                                    onClose={handleAddNotificationForm}\n                                    aria-labelledby=\"alert-dialog-slide-title\"\n                                    aria-describedby=\"alert-dialog-slide-description\">\n                                    <DialogTitle>Add Notification Form</DialogTitle>\n                                    <DialogContent>\n                                    <DialogContentText>\n                                        <TextField label=\"Title\" variant=\"outlined\" onChange = {handleNotifTitle} fullWidth required />\n                                        <TextField label=\"Description\" variant=\"outlined\" onChange = {handleNotifDescription} fullWidth required />\n                                    </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                    <Button onClick={handleAddNotificationForm} color=\"primary\">\n                                        Close\n                                    </Button>\n                                    <Button onClick={handleAddNotifications} variant=\"contained\" color=\"primary\">\n                                        Submit\n                                    </Button>\n                                    </DialogActions>\n                                </Dialog>\n                                <Dialog\n                                    open={openDeleteNotification}\n                                    TransitionComponent={Transition}\n                                    keepMounted\n                                    onClose={handleDeleteNotificationForm}\n                                    aria-labelledby=\"alert-dialog-slide-title\"\n                                    aria-describedby=\"alert-dialog-slide-description\">\n                                    <DialogTitle>Delete Notification Form</DialogTitle>\n                                    <DialogContent>\n                                    <DialogContentText>\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            value={selectedNotification}\n                                            onChange={handleSelectedNotification}\n                                            >\n                                        {patient.notification.map((notif) => {\n                                            return <MenuItem value={notif._id}>{notif.title}. {notif.description}</MenuItem>\n                                        })}\n                                        </Select>\n                                    </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                    <Button onClick={handleDeleteNotificationForm} color=\"primary\">\n                                        Close\n                                    </Button>\n                                    <Button onClick={handleDeleteNotifications} variant=\"contained\" color=\"secondary\">\n                                        Delete\n                                    </Button>\n                                    </DialogActions>\n                                </Dialog>\n                                <Dialog\n                                    open={openTypeForm}\n                                    TransitionComponent={Transition}\n                                    keepMounted\n                                    onClose={handleOpenTypeForm}\n                                    aria-labelledby=\"alert-dialog-slide-title\"\n                                    aria-describedby=\"alert-dialog-slide-description\">\n                                    <DialogTitle>Update Infusion Type Form</DialogTitle>\n                                    <DialogContent>\n                                    <DialogContentText>\n                                        <TextField label=\"Infusion Type Separated by ;\" variant=\"outlined\" onChange={handleInfusionType} fullWidth/>\n                                    </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                    <Button onClick={handleOpenTypeForm} color=\"primary\">\n                                        Close\n                                    </Button>\n                                    <Button onClick={handleUpdateType} variant=\"contained\" color=\"primary\">\n                                        Update\n                                    </Button>\n                                    </DialogActions>\n                                </Dialog>\n                                <Dialog\n                                    open={openCheckinForm}\n                                    TransitionComponent={Transition}\n                                    keepMounted\n                                    onClose={handleCheckinForm}\n                                    aria-labelledby=\"alert-dialog-slide-title\"\n                                    aria-describedby=\"alert-dialog-slide-description\">\n                                    <DialogTitle>Next Check-in Form</DialogTitle>\n                                    <DialogContent>\n                                    <DialogContentText>\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                            <KeyboardDatePicker\n                                                margin=\"normal\"\n                                                id=\"date-picker-dialog\"\n                                                label=\"Select a Date\"\n                                                format=\"MM/dd/yyyy\"\n                                                value={newCheckinDate}\n                                                fullWidth\n                                                onChange={handleNewCheckinDate}\n                                                KeyboardButtonProps={{\n                                                    'aria-label': 'change date',\n                                                }}/>\n                                            <KeyboardTimePicker\n                                            margin=\"normal\"\n                                            id=\"time-picker\"\n                                            label=\"Select a Time\"\n                                            value={newCheckinTime}\n                                            fullWidth\n                                            onChange={handleNewCheckinTime}\n                                            KeyboardButtonProps={{\n                                                'aria-label': 'change time',\n                                            }}/>\n                                        </MuiPickersUtilsProvider>        \n                                        <FormControl className=\"selectInput\">\n                                            <InputLabel>Replace last checkin with {dayMonthYear(newCheckinDate)} {newCheckinTime.toLocaleTimeString(navigator.language, {\n                                                hour: '2-digit',\n                                                minute:'2-digit'\n                                            })}?</InputLabel>\n                                            <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            value={updateRecentCheck}\n                                            onChange={handleUpdateCheck}\n                                            >\n                                                <MenuItem value=\"yes\">Yes, update the last checkin.</MenuItem>\n                                                <MenuItem value=\"no\">No, do not update.</MenuItem>\n                                            </Select>\n                                        </FormControl>        \n                                    </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                    <Button onClick={handleCheckinForm} color=\"primary\">\n                                        Close\n                                    </Button>\n                                    <Button onClick={updateCheckin} variant=\"contained\" color=\"primary\">\n                                        Update\n                                    </Button>\n                                    </DialogActions>\n                                </Dialog>\n                                <Dialog\n                                    open={openEventForm}\n                                    TransitionComponent={Transition}\n                                    keepMounted\n                                    onClose={handleEventForm}\n                                    aria-labelledby=\"alert-dialog-slide-title\"\n                                    aria-describedby=\"alert-dialog-slide-description\">\n                                    <DialogTitle>Add Schedule Event Form</DialogTitle>\n                                    <DialogContent>\n                                    <DialogContentText>\n                                        <TextField label=\"Title\" variant=\"outlined\" onChange = {handleTitleChange} fullWidth required />\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                            <KeyboardDatePicker\n                                                margin=\"normal\"\n                                                id=\"date-picker-dialog\"\n                                                label=\"Select a Date\"\n                                                format=\"MM/dd/yyyy\"\n                                                value={selectedDate}\n                                                fullWidth\n                                                onChange={handleSelectedDate}\n                                                KeyboardButtonProps={{\n                                                    'aria-label': 'change date',\n                                                }}/>\n                                            <KeyboardTimePicker\n                                            margin=\"normal\"\n                                            id=\"time-picker\"\n                                            label=\"Select a Time\"\n                                            value={selectedTime}\n                                            fullWidth\n                                            onChange={handleSelectedTime}\n                                            KeyboardButtonProps={{\n                                                'aria-label': 'change time',\n                                            }}/>\n                                        </MuiPickersUtilsProvider>\n                                        <TextField label=\"Description\" variant=\"outlined\" onChange = {handleDescriptionChange} fullWidth required />\n                                        <FormControl className=\"selectInput\">\n                                            <InputLabel>Select a tutorial for this event...</InputLabel>\n                                            <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            value={selectedArchive}\n                                            onChange={handleNewArchive}\n                                            >\n                                                {patient.infusionArray.map((tutorial) => {\n                                                    return <MenuItem value={tutorial._id}>{tutorial.name}</MenuItem>\n                                                })}\n                                            </Select>\n                                        </FormControl>\n                                    </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                    <Button onClick={handleEventForm} color=\"primary\">\n                                        Close\n                                    </Button>\n                                    <Button onClick={handleAddPatientEvent} variant=\"contained\" color=\"primary\">\n                                        Submit\n                                    </Button>\n                                    </DialogActions>\n                                </Dialog>\n                                <Dialog\n                                    open={openDeleteEventForm}\n                                    TransitionComponent={Transition}\n                                    keepMounted\n                                    onClose={handleDeleteEventForm}\n                                    aria-labelledby=\"alert-dialog-slide-title\"\n                                    aria-describedby=\"alert-dialog-slide-description\"\n                                >\n                                    <DialogTitle>Delete Notification Event Form</DialogTitle>\n                                    <DialogContent>\n                                    <DialogContentText>\n                                    <FormControl className=\"selectInput\">\n                                        <InputLabel>Select an event...</InputLabel>\n                                        <Select\n                                        labelId=\"demo-simple-select-label\"\n                                        value={eventId}\n                                        onChange={handleNewEventId}\n                                        >\n                                        {patientEvents.length !== 0 ? patientEvents.map((event) => {\n                                            return <MenuItem value={event._id}>{`${event.title} at ${dayMonthYear(new Date(event.notifyAt))} ${new Date(event.notifyAt).toLocaleTimeString(navigator.language, {\n                                                hour: '2-digit',\n                                                minute:'2-digit'\n                                              })}`}</MenuItem>\n                                        }): \"No Events Found\"}\n                                        </Select>\n                                    </FormControl>\n                                    </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                    <Button onClick={handleDeleteEventForm} color=\"primary\">\n                                        Close\n                                    </Button>\n                                    <Button onClick={handleDeletePatientEvent} variant=\"contained\" color=\"primary\">\n                                        Delete\n                                    </Button>\n                                    </DialogActions>\n                                </Dialog>\n                            </div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={8} sm={8} md={5} style={{marginLeft:'50px'}} className=\"widgetContainer\">\n                        <div className=\"assignScheduleLabel\">\n                            <Typography variant=\"h4\">\n                                Assigned Tutorials<Button variant=\"outlined\" className=\"addMinusBtns\" onClick={handleTutorialForm}><AddIcon/></Button>\n                                <Button variant=\"outlined\" className=\"addMinusBtns\" onClick={handleDeleteTutorialForm}><RemoveIcon/></Button>\n                            </Typography>  \n                        </div>\n                        <div className=\"assignScheduleWidget\">\n                            {<TutorialsList classes={classes}></TutorialsList>}\n                            <Dialog\n                                    open={openTutorialForm}\n                                    TransitionComponent={Transition}\n                                    keepMounted\n                                    onClose={handleTutorialForm}\n                                    aria-labelledby=\"alert-dialog-slide-title\"\n                                    aria-describedby=\"alert-dialog-slide-description\"\n                            >\n                                <DialogTitle>Assign Tutorial Form</DialogTitle>\n                                    <DialogContent>\n                                    <DialogContentText>\n                                    <FormControl className=\"selectInput\">\n                                        <InputLabel>Assign Tutorial...</InputLabel>\n                                        <Select\n                                        labelId=\"demo-simple-select-label\"\n                                        value={addTutorial}\n                                        onChange={handleSelectedArchive}\n                                        >\n                                        {availableTutorials.map(tutorial => {\n                                            return <MenuItem value={tutorial}>{tutorial.name}, {tutorial.duration}</MenuItem>\n                                        })}\n                                        </Select>\n                                    </FormControl>\n                                    </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                    <Button onClick={handleTutorialForm} color=\"primary\">\n                                        Close\n                                    </Button>\n                                    <Button onClick={handleAddPatientTutorial} variant=\"contained\" color=\"primary\">\n                                        Assign\n                                    </Button>\n                                    </DialogActions>\n                            </Dialog>\n                            <Dialog\n                                    open={deleteTutorialForm}\n                                    TransitionComponent={Transition}\n                                    keepMounted\n                                    onClose={handleDeleteTutorialForm}\n                                    aria-labelledby=\"alert-dialog-slide-title\"\n                                    aria-describedby=\"alert-dialog-slide-description\"\n                                >\n                                    <DialogTitle>Delete Tutorial Form</DialogTitle>\n                                    <DialogContent>\n                                    <DialogContentText>\n                                    <FormControl className=\"selectInput\">\n                                        <InputLabel>Select a tutorial...</InputLabel>\n                                        <Select\n                                        labelId=\"demo-simple-select-label\"\n                                        value={selectedTutorial}\n                                        onChange={handleNewTutorialId}\n                                        >\n                                        {patientTutorials.length !== 0 ? patientTutorials.map((tutorial) => {\n                                            return <MenuItem value={tutorial._id}>{`${tutorial.name}; ${tutorial.description}`}</MenuItem>\n                                        }): \"No Tutorials Found\"}\n                                        </Select>\n                                    </FormControl>\n                                    </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                    <Button onClick={handleDeleteTutorialForm} color=\"primary\">\n                                        Close\n                                    </Button>\n                                    <Button onClick={handleDeletePatientTutorial} variant=\"contained\" color=\"primary\">\n                                        Delete\n                                    </Button>\n                                    </DialogActions>\n                                </Dialog>\n                        </div>\n                    </Grid>\n                </Grid>\n            </ThemeProvider>\n        </div>\n    )\n}\n/**\n\n */","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/patientTutorials/tutorial.js",["273","274","275","276","277","278","279"],"import React,{useState, useEffect} from \"react\";\nimport {Grid, Typography} from \"@material-ui/core\";\nimport \"./tutorial.css\";\nimport Tutorial from \"../TutorialPage/tutorial\";\nimport axios from 'axios';\n\nexport default function PatientTutorials(){\n\n    const [tutorials, setTutorials] = useState([]);\n    const [tutorialsClicked, setTutorialsClicked] = useState([]);\n    const [tutorialsLoaded, setTutorialsLoaded] = useState(false);\n\n    useEffect(() => {\n        let tutorialsArr = [];\n        let tutorialsBoolArr = [];\n        axios.get('http://localhost:5000/tutorials/all').then(res=>{\n            tutorialsArr = res.data;\n            setTutorials(tutorialsArr);\n            for (let i = 0; i < tutorialsArr.length; i++){\n                tutorialsBoolArr.push(true);\n            }\n            setTutorialsClicked(tutorialsBoolArr);\n            setTutorialsLoaded(true);\n        })\n    },[])\n\n    const handleTutorialClicked = (index) => {\n        let clickedArr = [];\n        for (let i = 0; i < tutorials.length; i++){\n            if (i !== index){\n                clickedArr.push(false);\n            }\n        }\n        setTutorialsClicked(clickedArr);\n    }\n    \n    return (\n        <Grid>\n            {tutorials.map((item, index) => {\n                return <Tutorial num={index}/>    \n            })}\n        </Grid>\n    )\n}",["280","281"],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/UserContext.js",[],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/navPharmResponsive/navPharmResponsive.js",["282","283","284","285"],"import React, {useState, useContext} from 'react';\nimport { UserContext } from \"../../UserContext\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CloseIcon from '@material-ui/icons/Close';\nimport logo from \"../../innovation.png\";\nimport \"../patientNav/patientNav.css\"\nimport axios from 'axios';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title:{\n        flexGrow: 1,\n    }\n}));\n\nexport default function PatientNav(){\n    const classes = useStyles();\n    \n    const {user, setUser} = useContext(UserContext);\n\n    const [auth, setAuth] = useState(true);\n    const [profileAnchor, setProfileAnchor] = React.useState(null);\n    const [hamburgerAnchor, setHamburgerAnchor] = React.useState(null);\n    const openProfile = Boolean(profileAnchor);\n    const openHamburger = Boolean(hamburgerAnchor);\n    const [hbIcon, setHbIcon] = React.useState(true);\n    const [closeIcon, setCloseIcon]= React.useState(false);\n\n    const handleProfile = (event) => {\n        setProfileAnchor(event.currentTarget);\n    };\n\n    const handleCloseProfile = () => {\n        setProfileAnchor(null);\n    };\n\n    const handleHamburger = (event) => {\n        setHamburgerAnchor(event.currentTarget);\n        setHbIcon(false);\n        setCloseIcon(true);\n    };\n\n    const handleHamburgerClose = () => {\n        setHamburgerAnchor(null);\n        setHbIcon(true);\n        setCloseIcon(false);\n    }\n\n    const handleLogout = () => {\n        setUser(null);\n    }\n\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar className=\"navStyling\">\n                    <div>\n                        <IconButton\n                            aria-label=\"hamburger list of pages\"\n                            aria-controls=\"menu-appbar\"\n                            aria-haspopup=\"true\"\n                            onClick={handleHamburger}\n                            color=\"inherit\">\n                                {hbIcon === true ? <MenuIcon className=\"hamburger\"/> : null}\n                                {closeIcon === true ? <CloseIcon className=\"close\"/> : null}\n                        </IconButton>\n                        <Menu\n                            id=\"menu-hamburger\"\n                            anchorEl={hamburgerAnchor}\n                            keepMounted\n                            open={openHamburger}\n                            onClose={handleHamburgerClose}\n                            PaperProps={{\n                                style: {\n                                     width: \"100%\",\n                                     maxWidth: \"100%\",\n                                     maxHeight: \"100%\",\n                                     left: 0,\n                                     right: 0,\n                                   }\n                                 }}\n                                 marginThreshold={0}\n                        >\n                            <Link className=\"burgerItem\" onClick={handleHamburgerClose} to=\"/\">Patients</Link>\n                            <Link className=\"burgerItem\" onClick={handleHamburgerClose} to=\"/Tutorials\">Tutorials</Link>\n                            <Link className=\"burgerItem\" onClick={handleHamburgerClose} to=\"/faq\">FAQ</Link>\n                        </Menu>\n                    </div>\n                    <IconButton edge=\"start\" id=\"logoIcon\" color=\"#00529b\" aria-label=\"menu\">\n                        <img src={logo} alt=\"Logo\" className=\"siteIcon\"/>\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link className=\"navItem\" to=\"/\">Patients</Link>\n                    </Typography>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link className=\"navItem\" to=\"/Tutorials\">Tutorials</Link>\n                    </Typography>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link className=\"navItem\" to=\"/faq\">FAQ</Link>\n                    </Typography>\n                        {auth && (\n                           <div>\n                               <IconButton\n                                    aria-label=\"account of current user\"\n                                    aria-controls=\"menu-appbar\"\n                                    aria-haspopup=\"true\"\n                                    onClick={handleProfile}\n                                    color=\"inherit\"\n                                >\n                                    <AccountCircle />\n                                </IconButton>\n                                <Menu\n                                    id=\"menu-appbar\"\n                                    anchorEl={profileAnchor}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                        }}\n                                        keepMounted\n                                        transformOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                    }}\n                                    open={openProfile}\n                                    onClose={handleCloseProfile}\n                                >\n                                    <MenuItem className=\"profileMenu\" >{user.firstName + \" \" + user.lastName}</MenuItem>\n                                    <MenuItem className=\"profileMenu\" ><Link to=\"/settings\" className=\"profileLink\">Settings</Link></MenuItem>\n                                    <MenuItem className=\"profileMenu\" onClick={handleLogout}>Log Out</MenuItem>\n                                </Menu>\n                           </div> \n                        )}\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/homePage/pharmacist/pharmacistHome.js",["286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"import React, { useState, useEffect, useContext } from \"react\"\nimport {UserContext} from \"../../../UserContext\";\nimport {PatientContext} from \"../../../PatientContext\";\nimport { Grid } from \"@material-ui/core\"\nimport { Typography } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport '../pharmacist/pharmacistHome.css'\nimport Paper from '@material-ui/core/Paper';\nimport SearchBar from \"material-ui-search-bar\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from \"@material-ui/core/Button\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport axios from 'axios';\n\n\nconst useStyles = makeStyles((theme) => ({\n    /*root: {\n        flexGrow: 1,\n    },*/\n    darkBluePaper: {\n      background: \"#00529B\"\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        width: \"100%\",\n    },\n}));\n\n\nexport default function PharmacistHome(props){\n    const {user, setUser} = useContext(UserContext);\n    const {patient, setPatient} = useContext(PatientContext);\n    const [patients, setPatients] = useState(\"\");\n    const [searchString, setSearchString] = useState(\"\");\n    const [filterSetting, setFilterSetting] = useState(\"\");\n\n    useEffect(() => {\n        axios.get(\"http://localhost:5000/patients/all\").then(res => {\n            setPatients(res.data);\n        })\n    },[])\n\n    const searchPatients = () => {\n        let search=[];\n        if (searchString === \"\" || searchString === null){\n            search = patients;\n            return search;\n        }\n        for (let i = 0; i<patients.length; i++){\n            if (`${patients[i].firstName.toLowerCase()} ${patients[i].lastName.toLowerCase()}`.includes(searchString.toLowerCase())){\n                search.push(patients[i])\n            }\n        }\n        return search;\n    }\n    const dayMonthYear = (date) => {\n        let dd = String(date.getDate()+1);\n        let mm = String(date.getMonth()+1);\n        let yy = String(date.getFullYear());\n        let dateString = `${mm}/${dd}/${yy}`;\n        return dateString;\n    }\n    const handleNewFilter = (event) => {\n        setFilterSetting(event.target.value);\n    }\n\n    const handlePharmAssign = (event) => {\n        let patientId = event.target.ariaLabel;\n        for (let i = 0; i<patients.length; i++){\n            if (patients[i]._id === patientId){\n                setPatient(patients[i]);\n            }\n        }       \n    }\n\n    const handleFilterPatients = () => {\n        let patientList = searchPatients();\n        if (filterSetting === \"\"){\n            return patientList;\n        }\n        else if (filterSetting === \"firstName\"){\n            return patientList.sort((a,b) => a.firstName.localeCompare(b.firstName));\n        }\n        else if (filterSetting === \"lastName\"){\n            return patientList.sort((a,b) => a.lastName.localeCompare(b.lastName));\n        }\n        else if (filterSetting === \"birthday\"){\n            return patientList.sort((a,b) => new Date(a.birthday) - new Date(b.birthday));\n        }\n        else if (filterSetting === \"lastCheckin\"){\n            return patientList.sort((a,b) => new Date(a.recentCheckIn) - new Date(b.recentCheckIn));\n        }\n        else if (filterSetting === \"nextCheckin\"){\n            return patientList.sort((a,b) => new Date(a.nextCheckIn) - new Date(b.nextCheckIn));\n        }\n    }\n\n    const infusionStringArr = (arr) => {\n        let str = \"\";\n        arr.map((item,index) => {\n            if (index === arr-1){\n                str += item;\n            }\n            str += item + \", \";\n    })\n    return str.slice(0, str.length-2);\n    }\n\n    const classes = useStyles();\n\n    return(\n        <div className = \"pharmacistHomeContainer\">\n            <div className = \"greetingContainer\">\n              <div className = \"nameBar\"> Hi {user.firstName}, </div>\n              <div className = \"patientBar\"> You have {patients.length} patients to check up on!</div>\n            </div>\n\n            <div className = \"barContainer\">\n                <div className = \"filterContainer\">\n                    <div className = \"sortBox\"> <Typography variant=\"h6\" className=\"sortText\">SORT</Typography> </div>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel>Filter by...</InputLabel>\n                        <Select\n                        labelId=\"demo-simple-select-label\"\n                        value={filterSetting}\n                        onChange={handleNewFilter}\n                        fullWidth\n                        >\n                        <MenuItem value=\"firstName\">First Name</MenuItem>\n                        <MenuItem value=\"lastName\">Last Name</MenuItem>\n                        <MenuItem value=\"birthday\">Birthday</MenuItem>\n                        <MenuItem value=\"lastCheckin\">Last Check-In</MenuItem>\n                        <MenuItem value=\"nextCheckin\">Next Check-In</MenuItem>\n                        </Select>\n                    </FormControl>\n                </div>\n                <div>\n                    <InputLabel><Typography variant=\"subtitle2\">Patient Name: {patient === null ? \"\" : `${patient.firstName} ${patient.lastName}`}</Typography></InputLabel>\n                    <Button disabled={patient === null} variant=\"contained\" size=\"small\" className=\"buttonLinkStyling\"><Link to=\"/pharmAssign\" className=\"linkStyling\">View Profile</Link></Button>\n                </div>\n                \n                <SearchBar\n                    value={searchString}\n                    onChange={(newValue) => setSearchString(newValue)}\n                />\n            </div>\n            <Grid container spacing={0} id = \"gridContainer\">\n                <Grid item xs={2}>\n                    <Paper className={classes.paper} className = \"gridItemTitle\" id = 'patientCol'>Patient Name</Paper>\n                </Grid>\n                <Grid item xs={1}>\n                    <Paper className={classes.paper} className = \"gridItemTitle\" id = 'dobCol'>Date of Birth</Paper>\n                </Grid>\n                <Grid item xs={1}>\n                    <Paper className={classes.paper} className = \"gridItemTitle\" id = 'genderCol'>Gender</Paper>\n                </Grid>\n                <Grid item xs={2}>\n                    <Paper className={classes.paper} className = \"gridItemTitle\" id = 'lastCheckCol'>Last Check-In</Paper>\n                </Grid>\n                <Grid item xs={2}>\n                    <Paper className={classes.paper} className = \"gridItemTitle\" id = 'nextCheckCol'>Next Check-In</Paper>\n                </Grid>\n                <Grid item xs={2}>\n                    <Paper className={classes.paper} className = \"gridItemTitle\" id = 'infusionCol'>Infusion Type</Paper>\n                </Grid>\n                <Grid item xs={2}>\n                    <Paper className={classes.paper} className = \"gridItemTitle\" id = 'notificationCol'>Notification Info</Paper>\n                </Grid>\n\n                {patients.length !== 0 ? handleFilterPatients().map((patient, index) => {\n                    return <Grid container>\n                        <Grid item xs={2}>\n                            <Paper className={classes.paper} className = \"gridItem\" onClick={handlePharmAssign} aria-label={patient._id}>{`${patient.firstName} ${patient.lastName}`}</Paper>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <Paper className={classes.paper} className = \"gridItem\">{`${dayMonthYear(new Date(patient.birthday))}`}</Paper>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <Paper className={classes.paper} className = \"gridItem\">{`${patient.gender[0].toUpperCase() + patient.gender.substring(1)}`}</Paper>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <Paper className={classes.paper} className = \"gridItem\">{`${patient.hasOwnProperty('recentCheckIn') === false ? 'None Set' : new Date(patient.recentCheckIn).toLocaleDateString()}`}</Paper>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <Paper className={classes.paper} className = \"gridItem\">{`${patient.hasOwnProperty('nextCheckIn') === false ? 'None Set' : new Date(patient.nextCheckIn).toLocaleDateString()}`}</Paper>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <Paper className={classes.paper} className = \"gridItem\">{patient.infusionType.length === 0 ? \"None Set\" : infusionStringArr(patient.infusionType)}</Paper>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <Paper className={classes.paper} className = \"gridItem\">{patient.notificationType === \"both\" ? \"Phone and Email\" : `${patient.notificationType[0].toUpperCase() + patient.notificationType.substring(1)}`}</Paper>\n                        </Grid>\n                    </Grid> \n                    }) : \"Loading\"}\n            </Grid>\n       </div>\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/PatientContext.js",[],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/authNav/authNav.js",["305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324"],"import React, {useState, useContext} from 'react';\nimport { UserContext } from \"../../UserContext\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CloseIcon from '@material-ui/icons/Close';\nimport logo from \"../../innovation.png\";\nimport \"../patientNav/patientNav.css\"\nimport axios from 'axios';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title:{\n        flexGrow: 1,\n    }\n}));\n\nexport default function PatientNav(){\n    const classes = useStyles();\n    \n    const [profileAnchor, setProfileAnchor] = React.useState(null);\n    const [hamburgerAnchor, setHamburgerAnchor] = React.useState(null);\n    const openProfile = Boolean(profileAnchor);\n    const openHamburger = Boolean(hamburgerAnchor);\n    const [hbIcon, setHbIcon] = React.useState(true);\n    const [closeIcon, setCloseIcon]= React.useState(false);\n\n    const handleProfile = (event) => {\n        setProfileAnchor(event.currentTarget);\n    };\n\n    const handleCloseProfile = () => {\n        setProfileAnchor(null);\n    };\n\n    const handleHamburger = (event) => {\n        setHamburgerAnchor(event.currentTarget);\n        setHbIcon(false);\n        setCloseIcon(true);\n    };\n\n    const handleHamburgerClose = () => {\n        setHamburgerAnchor(null);\n        setHbIcon(true);\n        setCloseIcon(false);\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar className=\"navStyling\">\n                    <Link to=\"/loginSignup\"><IconButton edge=\"start\" id=\"logoIcon\" color=\"#00529b\" aria-label=\"menu\">\n                        <img src={logo} alt=\"Logo\" className=\"siteIcon\"/>\n                    </IconButton></Link>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/components/pharmFooter/footer.js",["325","326","327"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport '../footer/footer.css';\n\n\nexport default function footerBar() {\n\treturn (\n\t\t<div className=\"footerContainer\">\n\t\t\t<div className=\"liveHelpBar\">\n\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t<a className=\"footerLink\">Patient Messages</a>\n\t\t\t\t</Typography>\n\t\t\t</div>\n\t\t</div>\n\t);\n}","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/TutorialContext.js",[],"/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/TutorialList/tutorialList.js",["328","329","330","331","332","333","334"],"import React, {useState, useEffect, useContext} from \"react\";\nimport './tutorialList.css';\nimport {UserContext} from \"../../UserContext\";\nimport {TutorialContext} from \"../../TutorialContext\";\nimport {Grid, Card, CardMedia, CardContent, Typography} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport ArrowForwardIos from \"@material-ui/icons/ArrowForwardIos\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nexport default function TutorialList(){\n    const {user, setUser} = useContext(UserContext);\n    const {tutorial, setTutorial} = useContext(TutorialContext);\n    const [tutorialSelect, setTutorialSelect] = useState(null);\n    const [openTutorialPrompt, setTutorialPrompt] = useState(false);\n\n    const handleTutorialPrompt = (event) => {\n        user.infusionArray.map(tutorial => {\n            if (tutorial._id === event.target.id){\n                setTutorialSelect(tutorial.name);\n                setTutorial(tutorial);\n            }\n        })\n        setTutorialPrompt(!openTutorialPrompt);\n    }\n\n    return(\n        <Grid className=\"tutorialListContainer\">\n            <Grid container>\n                <Grid xs={1} item></Grid>\n                <Grid xs={10} item>\n                    {user.infusionArray.length === 0 ? <Typography variant=\"h4\" color=\"primary\" align=\"center\" className=\"defaultMsg\">Your pharmacist has not assigned any tutorials for you yet. <br/>Please check back soon.</Typography>\n                    : user.infusionArray.map((infusion) => {\n                        return <Card className=\"cardRoot\" >\n                        <img src={infusion.tutorials[0].video.thumbnail} className=\"cover\"></img>\n                        <div className=\"cardDetails\">\n                            <CardContent>\n                                <Typography variant=\"h5\">\n                                    {infusion.name}\n                                </Typography>\n                                <Typography variant=\"subtitle1\" className=\"content\">\n                                    {infusion.description}\n                                </Typography>\n                                <Typography variant=\"subtitle1\">\n                                    Duration: {infusion.duration} \n                                </Typography>\n                            </CardContent>\n                        </div>\n                        <ArrowForwardIos id={infusion._id} onClick={handleTutorialPrompt} className=\"arrowButton\"/>\n                    </Card>\n                    })}\n                </Grid> \n                <Grid xs={1} item></Grid>\n            </Grid>\n            <Dialog\n                open={openTutorialPrompt}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleTutorialPrompt}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle>Tutorial Select</DialogTitle>\n                <DialogContent>\n                <DialogContentText>\n                    <Typography>Go to {tutorialSelect} Tutorial? </Typography>\n                </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={handleTutorialPrompt} color=\"primary\">\n                    Close\n                </Button>\n                <Link to=\"/tutorialPage\"><Button variant=\"contained\" color=\"primary\">\n                    View\n                </Button></Link> \n                </DialogActions>\n            </Dialog>\n           \n        </Grid>\n    )\n}\n/*\n    <Link to=\"/tutorialPage\" onClick={handleTutorialId(infusion)} className=\"arrowButton\"></Link>\n*/\n","/Users/abdulosman/Documents/GitHub/InnovationLab-UCI-Capstone/gap-project/client/src/pages/pharmSettings/settings.js",["335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351"],"import React, {useState, useContext, useEffect} from \"react\";\nimport { UserContext } from \"../../UserContext\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { TextField } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport ContactImage from '../pharmContact/pharmContact_image2.png';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport axios from 'axios';\nimport {FormControl, \n        FormLabel,\n        Radio, \n        RadioGroup, \n        FormControlLabel} from '@material-ui/core';\nimport CreateIcon from '@material-ui/icons/Create';\nimport './settings.css'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n  };\n  \n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n  \n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper,\n      height: '100vh'\n    },\n    pageTitle:{\n        textAlign: 'center',\n        margin: '20px'\n    },\n    cardHeader: {\n        backgroundColor: '#00529B',\n        color: '#FFFFFF'\n        \n    },\n    image:{\n        width: '100%',\n        display: 'block',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        marginTop: '20px',\n        marginBottom: '20px'\n\n    },\n    innerBox:{\n        margin: '10px',\n        border: '1px',\n        borderColor: '#00529B',\n        borderStyle: 'solid',\n        borderRadius: '20px'\n    }\n  }));\n  const Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nexport default function PatientSettings(){\n\n    const {user, setUser} = useContext(UserContext);\n\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n    const [phone, setPhone] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [currentPass, setCurrentPass] = useState(\"\");\n    const [newPass, setNewPass] = useState(\"\");\n    const [repeatPass, setRepeatPass] = useState(\"\");\n    const [notifyPhone, setNotifyPhone] = useState(\"Yes\");\n    const [notifyEmail, setNotifyEmail] = useState(\"Yes\");\n    const [pharmName, setPharmName] = useState(\"\");\n    const [pharmAddress, setPharmAddress] = useState({});\n    const [pharmPhone, setPharmPhone] = useState(\"\");\n    const [pharmEmail, setPharmEmail] = useState(\"\");\n    const [pharmId, setPharmId] = useState(\"\");\n    const [openPharmacyForm, setOpenPharmacyForm] = useState(false);\n    \n    useEffect( () => {\n        axios.get('http://localhost:5000/pharmacy/all').then(res => {\n            console.log(res.data[0]._id);\n            let address = {'streetName': \"\", 'city': \"\", 'state': \"\", 'zipCode': \"\"};\n            let phone = \"\";\n            let email = \"\";\n            let name = \"\";\n            for (const [key, val] of Object.entries(res.data[0])){\n                if (key === 'streetName' || key === 'city' || key === 'state' || key === 'zipCode'){\n                    address[key] = val;\n                }\n                else if (key === 'phone'){\n                    phone = val;\n                }\n                else if (key === 'email'){\n                    email = val;\n                }\n                else if (key === 'name'){\n                    name = val;\n                }\n            }\n            setPharmName(name);\n            setPharmAddress(address);\n            setPharmEmail(email);\n            setPharmPhone(phone);\n            setPharmId(res.data[0]._id);\n        });\n    },[])   \n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    }\n    const handleCurrentPass = (event, newValue) => {\n        setCurrentPass(newValue);\n    }\n    const handleNewPass = (event) => {\n        setNewPass(event.target.value);\n    }\n    const handleRepeatPass = (event, newValue) => {\n        setRepeatPass(newValue);\n    }\n\n    const handleNewPhone = (event) => {\n        setPharmPhone(event.target.value);\n    }\n    const handleNewEmail = (event) => {\n        setPharmEmail(event.target.value);\n    }\n    const handleNewName = (event) => {\n        setPharmName(event.target.value);\n    }\n    const handlePharmacyForm = (event) => {\n        setOpenPharmacyForm(!openPharmacyForm);\n    }\n    const handleUpdateAddress = (event) => {\n        let address = pharmAddress;\n        switch (event.target.id){\n            case \"pharmStreet\":\n                address.streetName = event.target.value;\n                break;\n            case \"pharmCity\":\n                address.city = event.target.value;\n                break;\n            case \"pharmState\":\n                address.state = event.target.value;\n                break;\n            case \"pharmZipcode\":\n                address.zipCode = event.target.value;\n                break;\n        }\n        setPharmAddress(address);\n    }\n    const handleUpdatePharmacy = () => {\n        const value = {\n            name: pharmName,\n            streetName: pharmAddress.streetName,\n            city: pharmAddress.city,\n            state: pharmAddress.state,\n            zipCode: pharmAddress.zipCode,\n            phone: pharmPhone,\n            email: pharmEmail\n        }\n        axios.post(`http://localhost:5000/pharmacy/updateInfo/${pharmId}`, value).then(res =>{ \n        })\n        setOpenPharmacyForm(!openPharmacyForm);\n    } \n    \n    return (\n        <Grid container>\n            <Grid item xs={1}></Grid>\n            <Grid item xs={10}>\n            <div className={classes.root}>\n                <Typography variant=\"h3\" align=\"center\" className=\"pageLabel\">Settings</Typography>\n                <div className=\"blueOutline\">\n                <AppBar position=\"static\" className=\"appBar\">\n                    <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" className=\"tabAlign\">\n                    <Tab label=\"Security\" {...a11yProps(0)} className=\"tabs\"/>\n                    <Tab label=\"About Us\" {...a11yProps(1)} className=\"tabs\"/>\n                    </Tabs>\n                </AppBar>\n                <TabPanel value={value} index={0} >\n                    <div className=\"panelStyling\">\n                        <TextField \n                            type=\"password\"\n                            id=\"password\"\n                            label=\"Enter current password\"\n                            defaultValue={currentPass}\n                            variant=\"outlined\"\n                            className=\"securityStyling\"\n                            onChange={handleCurrentPass}\n                            fullWidth\n                            required>\n                        </TextField>\n                        <TextField \n                            type=\"password\"\n                            id=\"password\"\n                            label=\"Enter new password\"\n                            defaultValue={newPass}\n                            variant=\"outlined\"\n                            className=\"securityStyling\"\n                            onChange={handleNewPass}                            \n                            fullWidth\n                            required>\n                        </TextField>\n                        <TextField \n                            type=\"password\"\n                            id=\"password\"\n                            label=\"Confirm new password\"\n                            defaultValue={repeatPass}\n                            variant=\"outlined\"\n                            className=\"securityStyling\"\n                            onChange={handleRepeatPass}\n                            fullWidth\n                            required>\n                        </TextField>\n                        <div className=\"saveButtonContainer\"><Button variant=\"outlined\" className=\"saveButton\">Save</Button></div>\n                    </div>\n                </TabPanel>\n                <TabPanel value={value} index={1}>\n                <Container className={classes.cardRoot}>\n                    {/* top half */}\n                    <Grid container>\n                        <Grid item xl={2} lg={2} xs={2}></Grid>\n                        \n                        <Grid item xs={12} md={8}>                            \n                            <img\n                                src={ContactImage}\n                                alt=\"Single tree with clouds in the background\"\n                                className={classes.image} />\n                        </Grid>\n                        <Grid item xl={2} lg={2} xs={2}></Grid>\n                    </Grid>\n                    {/* bottom half */}\n                    <Grid container spacing={2}>\n                        <Grid item xs={2}></Grid>\n                        <Grid item xs={12} md={4}>\n                                <Card borderRadius={30}>\n                                    <CardHeader\n                                        className={classes.cardHeader}\n                                        title=\"Pharmacy\"\n                                        align='center'\n                                    />\n                                    <CardContent>\n                                        <Box className={classes.innerBox}>\n                                            <Typography align='center' >Name: </Typography>\n                                            <Typography align='center' >{pharmName}</Typography>\n                                        </Box>\n                                        <Box className={classes.innerBox}>\n                                            <Typography align='center' >Address:</Typography>\n                                            <Typography align='center' >{`${pharmAddress.streetName},\\n${pharmAddress.city}, ${pharmAddress.state} ${pharmAddress.zipCode}`}</Typography>\n                                        </Box>\n                                    </CardContent>\n                                </Card>\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                                <Card>\n                                    <CardHeader\n                                        className={classes.cardHeader}\n                                        title=\"Contact Information\"\n                                        align='center'\n                                    />\n                                    <CardContent>\n                                        <Box className={classes.innerBox}>\n                                            <Typography align='center' >Phone Number:</Typography> \n                                            <Typography align='center' >{pharmPhone}</Typography>\n                                        </Box>\n                                        <Box className={classes.innerBox}>\n                                            <Typography align='center' >Email:</Typography>\n                                            <Typography align='center' >{pharmEmail}</Typography>\n                                        </Box>\n                                    </CardContent>\n                                </Card>\n                        </Grid>\n                        <Grid item xs={2} sm={4} md={2} lg={2} xl={2}></Grid>\n                    </Grid>\n                    <Grid container spacing={1}>\n                            <Grid item xs={12} align=\"center\">\n                                <Button variant=\"outlined\" className=\"updatePharmBtn\" color=\"primary\" onClick={handlePharmacyForm}>Update Pharmacy Info</Button>\n                            </Grid>\n                        </Grid>\n                </Container>\n                </TabPanel>\n            </div>\n            </div>\n            </Grid>\n            <Grid item xs={1}></Grid>\n            <Dialog\n                open={openPharmacyForm}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handlePharmacyForm}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\">\n                <DialogTitle>Pharmacy Info Form</DialogTitle>\n                <DialogContent>\n                <DialogContentText>\n                    <TextField label=\"Pharmacy Name\" variant=\"outlined\" onChange={handleNewName} fullWidth required />\n                    <TextField label=\"Street Name\" onChange={handleUpdateAddress} id=\"pharmStreet\" variant=\"outlined\" fullWidth required />\n                    <TextField label=\"City\" onChange={handleUpdateAddress} id=\"pharmCity\" variant=\"outlined\" fullWidth required />\n                    <TextField label=\"State\" onChange={handleUpdateAddress} id=\"pharmState\" variant=\"outlined\" fullWidth required />\n                    <TextField label=\"Zip Code\" onChange={handleUpdateAddress} id=\"pharmZipcode\" variant=\"outlined\" fullWidth required />\n                    <TextField label=\"Phone Number\" onChange={handleNewPhone} variant=\"outlined\" fullWidth required />\n                    <TextField label=\"Email\" onChange={handleNewEmail} variant=\"outlined\" fullWidth required />\n                </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={handlePharmacyForm} color=\"primary\">\n                    Close\n                </Button>\n                <Button onClick={handleUpdatePharmacy} variant=\"contained\" color=\"primary\">\n                    Update\n                </Button>\n                </DialogActions>\n            </Dialog>\n      </Grid>\n    )\n}",{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","severity":1,"message":"357","line":19,"column":8,"nodeType":"358","messageId":"359","endLine":19,"endColumn":14},{"ruleId":"356","severity":1,"message":"360","line":3,"column":8,"nodeType":"358","messageId":"359","endLine":3,"endColumn":18},{"ruleId":"356","severity":1,"message":"361","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":16},{"ruleId":"362","severity":1,"message":"363","line":13,"column":5,"nodeType":"364","endLine":13,"endColumn":40},{"ruleId":"356","severity":1,"message":"365","line":2,"column":8,"nodeType":"358","messageId":"359","endLine":2,"endColumn":18},{"ruleId":"356","severity":1,"message":"360","line":3,"column":8,"nodeType":"358","messageId":"359","endLine":3,"endColumn":18},{"ruleId":"356","severity":1,"message":"361","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":16},{"ruleId":"356","severity":1,"message":"366","line":2,"column":8,"nodeType":"358","messageId":"359","endLine":2,"endColumn":18},{"ruleId":"356","severity":1,"message":"367","line":3,"column":8,"nodeType":"358","messageId":"359","endLine":3,"endColumn":17},{"ruleId":"356","severity":1,"message":"365","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":18},{"ruleId":"356","severity":1,"message":"368","line":6,"column":22,"nodeType":"358","messageId":"359","endLine":6,"endColumn":28},{"ruleId":"356","severity":1,"message":"369","line":7,"column":5,"nodeType":"358","messageId":"359","endLine":7,"endColumn":10},{"ruleId":"356","severity":1,"message":"368","line":12,"column":20,"nodeType":"358","messageId":"359","endLine":12,"endColumn":26},{"ruleId":"356","severity":1,"message":"369","line":13,"column":3,"nodeType":"358","messageId":"359","endLine":13,"endColumn":8},{"ruleId":"356","severity":1,"message":"370","line":55,"column":12,"nodeType":"358","messageId":"359","endLine":55,"endColumn":25},{"ruleId":"356","severity":1,"message":"371","line":66,"column":26,"nodeType":"358","messageId":"359","endLine":66,"endColumn":41},{"ruleId":"356","severity":1,"message":"372","line":90,"column":11,"nodeType":"358","messageId":"359","endLine":90,"endColumn":20},{"ruleId":"373","severity":1,"message":"374","line":259,"column":21,"nodeType":"364","endLine":259,"endColumn":106},{"ruleId":"356","severity":1,"message":"375","line":4,"column":10,"nodeType":"358","messageId":"359","endLine":4,"endColumn":20},{"ruleId":"356","severity":1,"message":"376","line":18,"column":25,"nodeType":"358","messageId":"359","endLine":18,"endColumn":28},{"ruleId":"356","severity":1,"message":"377","line":64,"column":18,"nodeType":"358","messageId":"359","endLine":64,"endColumn":25},{"ruleId":"378","severity":1,"message":"379","line":152,"column":7,"nodeType":"380","endLine":152,"endColumn":9,"suggestions":"381"},{"ruleId":"356","severity":1,"message":"368","line":20,"column":22,"nodeType":"358","messageId":"359","endLine":20,"endColumn":28},{"ruleId":"356","severity":1,"message":"369","line":21,"column":5,"nodeType":"358","messageId":"359","endLine":21,"endColumn":10},{"ruleId":"356","severity":1,"message":"377","line":41,"column":18,"nodeType":"358","messageId":"359","endLine":41,"endColumn":25},{"ruleId":"382","severity":1,"message":"383","line":97,"column":41,"nodeType":"384","messageId":"385","endLine":97,"endColumn":43},{"ruleId":"378","severity":1,"message":"386","line":123,"column":8,"nodeType":"380","endLine":123,"endColumn":10,"suggestions":"387"},{"ruleId":"373","severity":1,"message":"374","line":138,"column":69,"nodeType":"364","endLine":138,"endColumn":152},{"ruleId":"373","severity":1,"message":"374","line":139,"column":43,"nodeType":"364","endLine":139,"endColumn":102},{"ruleId":"356","severity":1,"message":"365","line":4,"column":10,"nodeType":"358","messageId":"359","endLine":4,"endColumn":20},{"ruleId":"356","severity":1,"message":"388","line":5,"column":10,"nodeType":"358","messageId":"359","endLine":5,"endColumn":17},{"ruleId":"356","severity":1,"message":"389","line":9,"column":8,"nodeType":"358","messageId":"359","endLine":9,"endColumn":18},{"ruleId":"356","severity":1,"message":"390","line":10,"column":8,"nodeType":"358","messageId":"359","endLine":10,"endColumn":16},{"ruleId":"356","severity":1,"message":"391","line":11,"column":8,"nodeType":"358","messageId":"359","endLine":11,"endColumn":19},{"ruleId":"356","severity":1,"message":"392","line":12,"column":8,"nodeType":"358","messageId":"359","endLine":12,"endColumn":14},{"ruleId":"356","severity":1,"message":"393","line":34,"column":13,"nodeType":"358","messageId":"359","endLine":34,"endColumn":17},{"ruleId":"356","severity":1,"message":"394","line":45,"column":12,"nodeType":"358","messageId":"359","endLine":45,"endColumn":24},{"ruleId":"356","severity":1,"message":"372","line":46,"column":11,"nodeType":"358","messageId":"359","endLine":46,"endColumn":20},{"ruleId":"356","severity":1,"message":"395","line":59,"column":11,"nodeType":"358","messageId":"359","endLine":59,"endColumn":27},{"ruleId":"356","severity":1,"message":"396","line":63,"column":12,"nodeType":"358","messageId":"359","endLine":63,"endColumn":21},{"ruleId":"397","severity":1,"message":"398","line":66,"column":7,"nodeType":"399","messageId":"400","endLine":81,"endColumn":8},{"ruleId":"373","severity":1,"message":"374","line":91,"column":15,"nodeType":"364","endLine":91,"endColumn":100},{"ruleId":"356","severity":1,"message":"368","line":12,"column":20,"nodeType":"358","messageId":"359","endLine":12,"endColumn":26},{"ruleId":"356","severity":1,"message":"369","line":13,"column":3,"nodeType":"358","messageId":"359","endLine":13,"endColumn":8},{"ruleId":"356","severity":1,"message":"401","line":38,"column":9,"nodeType":"358","messageId":"359","endLine":38,"endColumn":21},{"ruleId":"362","severity":1,"message":"363","line":70,"column":13,"nodeType":"364","endLine":70,"endColumn":45},{"ruleId":"356","severity":1,"message":"365","line":2,"column":8,"nodeType":"358","messageId":"359","endLine":2,"endColumn":18},{"ruleId":"356","severity":1,"message":"360","line":3,"column":8,"nodeType":"358","messageId":"359","endLine":3,"endColumn":18},{"ruleId":"356","severity":1,"message":"361","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":16},{"ruleId":"352","replacedBy":"402"},{"ruleId":"354","replacedBy":"403"},{"ruleId":"356","severity":1,"message":"368","line":16,"column":22,"nodeType":"358","messageId":"359","endLine":16,"endColumn":28},{"ruleId":"356","severity":1,"message":"369","line":17,"column":5,"nodeType":"358","messageId":"359","endLine":17,"endColumn":10},{"ruleId":"356","severity":1,"message":"404","line":35,"column":18,"nodeType":"358","messageId":"359","endLine":35,"endColumn":25},{"ruleId":"356","severity":1,"message":"405","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":25},{"ruleId":"356","severity":1,"message":"377","line":11,"column":18,"nodeType":"358","messageId":"359","endLine":11,"endColumn":25},{"ruleId":"397","severity":1,"message":"398","line":15,"column":9,"nodeType":"399","messageId":"400","endLine":30,"endColumn":10},{"ruleId":"356","severity":1,"message":"406","line":35,"column":12,"nodeType":"358","messageId":"359","endLine":35,"endColumn":20},{"ruleId":"378","severity":1,"message":"407","line":43,"column":16,"nodeType":"380","endLine":43,"endColumn":26},{"ruleId":"397","severity":1,"message":"398","line":56,"column":9,"nodeType":"399","messageId":"400","endLine":81,"endColumn":10},{"ruleId":"397","severity":1,"message":"398","line":106,"column":9,"nodeType":"399","messageId":"400","endLine":121,"endColumn":10},{"ruleId":"356","severity":1,"message":"408","line":12,"column":9,"nodeType":"358","messageId":"359","endLine":12,"endColumn":13},{"ruleId":"356","severity":1,"message":"409","line":12,"column":15,"nodeType":"358","messageId":"359","endLine":12,"endColumn":24},{"ruleId":"356","severity":1,"message":"410","line":12,"column":26,"nodeType":"358","messageId":"359","endLine":12,"endColumn":37},{"ruleId":"356","severity":1,"message":"411","line":15,"column":8,"nodeType":"358","messageId":"359","endLine":15,"endColumn":27},{"ruleId":"356","severity":1,"message":"412","line":28,"column":8,"nodeType":"358","messageId":"359","endLine":28,"endColumn":13},{"ruleId":"356","severity":1,"message":"393","line":84,"column":12,"nodeType":"358","messageId":"359","endLine":84,"endColumn":16},{"ruleId":"356","severity":1,"message":"377","line":84,"column":18,"nodeType":"358","messageId":"359","endLine":84,"endColumn":25},{"ruleId":"356","severity":1,"message":"413","line":85,"column":22,"nodeType":"358","messageId":"359","endLine":85,"endColumn":33},{"ruleId":"378","severity":1,"message":"414","line":91,"column":7,"nodeType":"380","endLine":91,"endColumn":9,"suggestions":"415"},{"ruleId":"356","severity":1,"message":"416","line":1,"column":26,"nodeType":"358","messageId":"359","endLine":1,"endColumn":35},{"ruleId":"356","severity":1,"message":"417","line":5,"column":8,"nodeType":"358","messageId":"359","endLine":5,"endColumn":12},{"ruleId":"356","severity":1,"message":"365","line":6,"column":8,"nodeType":"358","messageId":"359","endLine":6,"endColumn":18},{"ruleId":"356","severity":1,"message":"418","line":11,"column":8,"nodeType":"358","messageId":"359","endLine":11,"endColumn":19},{"ruleId":"356","severity":1,"message":"368","line":14,"column":22,"nodeType":"358","messageId":"359","endLine":14,"endColumn":28},{"ruleId":"356","severity":1,"message":"369","line":15,"column":5,"nodeType":"358","messageId":"359","endLine":15,"endColumn":10},{"ruleId":"356","severity":1,"message":"377","line":25,"column":18,"nodeType":"358","messageId":"359","endLine":25,"endColumn":25},{"ruleId":"356","severity":1,"message":"419","line":27,"column":12,"nodeType":"358","messageId":"359","endLine":27,"endColumn":26},{"ruleId":"382","severity":1,"message":"383","line":33,"column":41,"nodeType":"384","messageId":"385","endLine":33,"endColumn":43},{"ruleId":"356","severity":1,"message":"420","line":6,"column":8,"nodeType":"358","messageId":"359","endLine":6,"endColumn":24},{"ruleId":"356","severity":1,"message":"421","line":1,"column":16,"nodeType":"358","messageId":"359","endLine":1,"endColumn":24},{"ruleId":"356","severity":1,"message":"416","line":1,"column":26,"nodeType":"358","messageId":"359","endLine":1,"endColumn":35},{"ruleId":"356","severity":1,"message":"377","line":9,"column":18,"nodeType":"358","messageId":"359","endLine":9,"endColumn":25},{"ruleId":"356","severity":1,"message":"391","line":17,"column":8,"nodeType":"358","messageId":"359","endLine":17,"endColumn":19},{"ruleId":"356","severity":1,"message":"389","line":18,"column":8,"nodeType":"358","messageId":"359","endLine":18,"endColumn":18},{"ruleId":"356","severity":1,"message":"392","line":19,"column":8,"nodeType":"358","messageId":"359","endLine":19,"endColumn":14},{"ruleId":"356","severity":1,"message":"390","line":20,"column":8,"nodeType":"358","messageId":"359","endLine":20,"endColumn":16},{"ruleId":"356","severity":1,"message":"368","line":30,"column":22,"nodeType":"358","messageId":"359","endLine":30,"endColumn":28},{"ruleId":"356","severity":1,"message":"369","line":31,"column":5,"nodeType":"358","messageId":"359","endLine":31,"endColumn":10},{"ruleId":"422","severity":1,"message":"423","line":57,"column":9,"nodeType":"424","messageId":"425","endLine":57,"endColumn":24},{"ruleId":"356","severity":1,"message":"426","line":111,"column":12,"nodeType":"358","messageId":"359","endLine":111,"endColumn":19},{"ruleId":"356","severity":1,"message":"427","line":111,"column":21,"nodeType":"358","messageId":"359","endLine":111,"endColumn":31},{"ruleId":"356","severity":1,"message":"393","line":112,"column":12,"nodeType":"358","messageId":"359","endLine":112,"endColumn":16},{"ruleId":"356","severity":1,"message":"377","line":112,"column":18,"nodeType":"358","messageId":"359","endLine":112,"endColumn":25},{"ruleId":"382","severity":1,"message":"383","line":135,"column":38,"nodeType":"384","messageId":"385","endLine":135,"endColumn":40},{"ruleId":"356","severity":1,"message":"428","line":9,"column":32,"nodeType":"358","messageId":"359","endLine":9,"endColumn":41},{"ruleId":"356","severity":1,"message":"429","line":28,"column":8,"nodeType":"358","messageId":"359","endLine":28,"endColumn":22},{"ruleId":"356","severity":1,"message":"430","line":29,"column":8,"nodeType":"358","messageId":"359","endLine":29,"endColumn":30},{"ruleId":"356","severity":1,"message":"431","line":39,"column":10,"nodeType":"358","messageId":"359","endLine":39,"endColumn":13},{"ruleId":"422","severity":1,"message":"423","line":52,"column":9,"nodeType":"424","messageId":"425","endLine":52,"endColumn":24},{"ruleId":"356","severity":1,"message":"432","line":84,"column":29,"nodeType":"358","messageId":"359","endLine":84,"endColumn":34},{"ruleId":"356","severity":1,"message":"427","line":87,"column":21,"nodeType":"358","messageId":"359","endLine":87,"endColumn":31},{"ruleId":"356","severity":1,"message":"393","line":120,"column":12,"nodeType":"358","messageId":"359","endLine":120,"endColumn":16},{"ruleId":"356","severity":1,"message":"377","line":120,"column":18,"nodeType":"358","messageId":"359","endLine":120,"endColumn":25},{"ruleId":"356","severity":1,"message":"427","line":121,"column":21,"nodeType":"358","messageId":"359","endLine":121,"endColumn":31},{"ruleId":"382","severity":1,"message":"383","line":170,"column":32,"nodeType":"384","messageId":"385","endLine":170,"endColumn":34},{"ruleId":"382","severity":1,"message":"383","line":179,"column":32,"nodeType":"384","messageId":"385","endLine":179,"endColumn":34},{"ruleId":"382","severity":1,"message":"383","line":327,"column":35,"nodeType":"384","messageId":"385","endLine":327,"endColumn":37},{"ruleId":"382","severity":1,"message":"383","line":337,"column":35,"nodeType":"384","messageId":"385","endLine":337,"endColumn":37},{"ruleId":"382","severity":1,"message":"383","line":365,"column":38,"nodeType":"384","messageId":"385","endLine":365,"endColumn":40},{"ruleId":"378","severity":1,"message":"433","line":400,"column":7,"nodeType":"380","endLine":400,"endColumn":9,"suggestions":"434"},{"ruleId":"356","severity":1,"message":"365","line":3,"column":15,"nodeType":"358","messageId":"359","endLine":3,"endColumn":25},{"ruleId":"356","severity":1,"message":"412","line":6,"column":8,"nodeType":"358","messageId":"359","endLine":6,"endColumn":13},{"ruleId":"356","severity":1,"message":"377","line":10,"column":18,"nodeType":"358","messageId":"359","endLine":10,"endColumn":25},{"ruleId":"356","severity":1,"message":"435","line":14,"column":12,"nodeType":"358","messageId":"359","endLine":14,"endColumn":28},{"ruleId":"356","severity":1,"message":"436","line":15,"column":12,"nodeType":"358","messageId":"359","endLine":15,"endColumn":27},{"ruleId":"378","severity":1,"message":"437","line":26,"column":7,"nodeType":"380","endLine":26,"endColumn":9,"suggestions":"438"},{"ruleId":"356","severity":1,"message":"439","line":28,"column":11,"nodeType":"358","messageId":"359","endLine":28,"endColumn":32},{"ruleId":"352","replacedBy":"440"},{"ruleId":"354","replacedBy":"441"},{"ruleId":"356","severity":1,"message":"412","line":15,"column":8,"nodeType":"358","messageId":"359","endLine":15,"endColumn":13},{"ruleId":"356","severity":1,"message":"368","line":17,"column":22,"nodeType":"358","messageId":"359","endLine":17,"endColumn":28},{"ruleId":"356","severity":1,"message":"369","line":18,"column":5,"nodeType":"358","messageId":"359","endLine":18,"endColumn":10},{"ruleId":"356","severity":1,"message":"404","line":36,"column":18,"nodeType":"358","messageId":"359","endLine":36,"endColumn":25},{"ruleId":"356","severity":1,"message":"368","line":16,"column":22,"nodeType":"358","messageId":"359","endLine":16,"endColumn":28},{"ruleId":"356","severity":1,"message":"442","line":17,"column":5,"nodeType":"358","messageId":"359","endLine":17,"endColumn":11},{"ruleId":"356","severity":1,"message":"369","line":18,"column":5,"nodeType":"358","messageId":"359","endLine":18,"endColumn":10},{"ruleId":"356","severity":1,"message":"377","line":39,"column":18,"nodeType":"358","messageId":"359","endLine":39,"endColumn":25},{"ruleId":"382","severity":1,"message":"383","line":108,"column":30,"nodeType":"384","messageId":"385","endLine":108,"endColumn":32},{"ruleId":"443","severity":1,"message":"444","line":157,"column":54,"nodeType":"445","endLine":157,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":160,"column":54,"nodeType":"445","endLine":160,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":163,"column":54,"nodeType":"445","endLine":163,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":166,"column":54,"nodeType":"445","endLine":166,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":169,"column":54,"nodeType":"445","endLine":169,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":172,"column":54,"nodeType":"445","endLine":172,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":175,"column":54,"nodeType":"445","endLine":175,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":181,"column":62,"nodeType":"445","endLine":181,"endColumn":84},{"ruleId":"443","severity":1,"message":"444","line":184,"column":62,"nodeType":"445","endLine":184,"endColumn":84},{"ruleId":"443","severity":1,"message":"444","line":187,"column":62,"nodeType":"445","endLine":187,"endColumn":84},{"ruleId":"443","severity":1,"message":"444","line":190,"column":62,"nodeType":"445","endLine":190,"endColumn":84},{"ruleId":"443","severity":1,"message":"444","line":193,"column":62,"nodeType":"445","endLine":193,"endColumn":84},{"ruleId":"443","severity":1,"message":"444","line":196,"column":62,"nodeType":"445","endLine":196,"endColumn":84},{"ruleId":"443","severity":1,"message":"444","line":199,"column":62,"nodeType":"445","endLine":199,"endColumn":84},{"ruleId":"356","severity":1,"message":"421","line":1,"column":16,"nodeType":"358","messageId":"359","endLine":1,"endColumn":24},{"ruleId":"356","severity":1,"message":"446","line":1,"column":26,"nodeType":"358","messageId":"359","endLine":1,"endColumn":36},{"ruleId":"356","severity":1,"message":"447","line":2,"column":10,"nodeType":"358","messageId":"359","endLine":2,"endColumn":21},{"ruleId":"356","severity":1,"message":"365","line":6,"column":8,"nodeType":"358","messageId":"359","endLine":6,"endColumn":18},{"ruleId":"356","severity":1,"message":"448","line":8,"column":8,"nodeType":"358","messageId":"359","endLine":8,"endColumn":21},{"ruleId":"356","severity":1,"message":"390","line":9,"column":8,"nodeType":"358","messageId":"359","endLine":9,"endColumn":16},{"ruleId":"356","severity":1,"message":"449","line":10,"column":8,"nodeType":"358","messageId":"359","endLine":10,"endColumn":12},{"ruleId":"356","severity":1,"message":"361","line":11,"column":8,"nodeType":"358","messageId":"359","endLine":11,"endColumn":16},{"ruleId":"356","severity":1,"message":"450","line":12,"column":8,"nodeType":"358","messageId":"359","endLine":12,"endColumn":17},{"ruleId":"356","severity":1,"message":"412","line":15,"column":8,"nodeType":"358","messageId":"359","endLine":15,"endColumn":13},{"ruleId":"356","severity":1,"message":"368","line":17,"column":22,"nodeType":"358","messageId":"359","endLine":17,"endColumn":28},{"ruleId":"356","severity":1,"message":"369","line":18,"column":5,"nodeType":"358","messageId":"359","endLine":18,"endColumn":10},{"ruleId":"356","severity":1,"message":"451","line":36,"column":11,"nodeType":"358","messageId":"359","endLine":36,"endColumn":22},{"ruleId":"356","severity":1,"message":"452","line":37,"column":11,"nodeType":"358","messageId":"359","endLine":37,"endColumn":24},{"ruleId":"356","severity":1,"message":"453","line":38,"column":12,"nodeType":"358","messageId":"359","endLine":38,"endColumn":18},{"ruleId":"356","severity":1,"message":"454","line":39,"column":12,"nodeType":"358","messageId":"359","endLine":39,"endColumn":21},{"ruleId":"356","severity":1,"message":"455","line":41,"column":11,"nodeType":"358","messageId":"359","endLine":41,"endColumn":24},{"ruleId":"356","severity":1,"message":"456","line":45,"column":11,"nodeType":"358","messageId":"359","endLine":45,"endColumn":29},{"ruleId":"356","severity":1,"message":"457","line":49,"column":11,"nodeType":"358","messageId":"359","endLine":49,"endColumn":26},{"ruleId":"356","severity":1,"message":"458","line":55,"column":11,"nodeType":"358","messageId":"359","endLine":55,"endColumn":31},{"ruleId":"356","severity":1,"message":"360","line":3,"column":8,"nodeType":"358","messageId":"359","endLine":3,"endColumn":18},{"ruleId":"356","severity":1,"message":"361","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":16},{"ruleId":"362","severity":1,"message":"459","line":13,"column":5,"nodeType":"364","endLine":13,"endColumn":31},{"ruleId":"356","severity":1,"message":"416","line":1,"column":26,"nodeType":"358","messageId":"359","endLine":1,"endColumn":35},{"ruleId":"356","severity":1,"message":"409","line":5,"column":21,"nodeType":"358","messageId":"359","endLine":5,"endColumn":30},{"ruleId":"356","severity":1,"message":"368","line":15,"column":22,"nodeType":"358","messageId":"359","endLine":15,"endColumn":28},{"ruleId":"356","severity":1,"message":"369","line":16,"column":5,"nodeType":"358","messageId":"359","endLine":16,"endColumn":10},{"ruleId":"356","severity":1,"message":"377","line":25,"column":18,"nodeType":"358","messageId":"359","endLine":25,"endColumn":25},{"ruleId":"382","severity":1,"message":"383","line":31,"column":41,"nodeType":"384","messageId":"385","endLine":31,"endColumn":43},{"ruleId":"373","severity":1,"message":"374","line":48,"column":25,"nodeType":"364","endLine":48,"endColumn":92},{"ruleId":"356","severity":1,"message":"391","line":25,"column":9,"nodeType":"358","messageId":"359","endLine":25,"endColumn":20},{"ruleId":"356","severity":1,"message":"460","line":26,"column":9,"nodeType":"358","messageId":"359","endLine":26,"endColumn":18},{"ruleId":"356","severity":1,"message":"461","line":27,"column":9,"nodeType":"358","messageId":"359","endLine":27,"endColumn":14},{"ruleId":"356","severity":1,"message":"462","line":28,"column":9,"nodeType":"358","messageId":"359","endLine":28,"endColumn":19},{"ruleId":"356","severity":1,"message":"463","line":29,"column":9,"nodeType":"358","messageId":"359","endLine":29,"endColumn":25},{"ruleId":"356","severity":1,"message":"464","line":30,"column":8,"nodeType":"358","messageId":"359","endLine":30,"endColumn":18},{"ruleId":"356","severity":1,"message":"393","line":104,"column":12,"nodeType":"358","messageId":"359","endLine":104,"endColumn":16},{"ruleId":"356","severity":1,"message":"377","line":104,"column":18,"nodeType":"358","messageId":"359","endLine":104,"endColumn":25},{"ruleId":"356","severity":1,"message":"465","line":108,"column":12,"nodeType":"358","messageId":"359","endLine":108,"endColumn":17},{"ruleId":"356","severity":1,"message":"466","line":108,"column":19,"nodeType":"358","messageId":"359","endLine":108,"endColumn":27},{"ruleId":"356","severity":1,"message":"467","line":109,"column":12,"nodeType":"358","messageId":"359","endLine":109,"endColumn":17},{"ruleId":"356","severity":1,"message":"468","line":109,"column":19,"nodeType":"358","messageId":"359","endLine":109,"endColumn":27},{"ruleId":"356","severity":1,"message":"469","line":113,"column":12,"nodeType":"358","messageId":"359","endLine":113,"endColumn":23},{"ruleId":"356","severity":1,"message":"470","line":113,"column":25,"nodeType":"358","messageId":"359","endLine":113,"endColumn":39},{"ruleId":"356","severity":1,"message":"471","line":114,"column":12,"nodeType":"358","messageId":"359","endLine":114,"endColumn":23},{"ruleId":"356","severity":1,"message":"472","line":114,"column":25,"nodeType":"358","messageId":"359","endLine":114,"endColumn":39},{"ruleId":"397","severity":1,"message":"398","line":178,"column":9,"nodeType":"399","messageId":"400","endLine":191,"endColumn":10},"no-native-reassign",["473"],"no-negated-in-lhs",["474"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Typography' is defined but never used.","'SignUpForm' is defined but never used.","'LoginForm' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'signupLanding' is assigned a value but never used.","'setLoginLanding' is assigned a value but never used.","'toggleOne' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'makeStyles' is defined but never used.","'key' is assigned a value but never used.","'setUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.notificationType'. Either include it or remove the dependency array.","ArrayExpression",["475"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'getNextInfusion', 'getTodaysSchedule', and 'user.events.length'. Either include them or remove the dependency array.",["476"],"'Divider' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'user' is assigned a value but never used.","'loginLanding' is assigned a value but never used.","'handleRoleChange' is assigned a value but never used.","'loginForm' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'handleChange' is assigned a value but never used.",["473"],["474"],"'setAuth' is assigned a value but never used.","'TutorialContext' is defined but never used.","'earliest' is assigned a value but never used.","Assignments to the 'week' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'Card' is defined but never used.","'CardMedia' is defined but never used.","'CardContent' is defined but never used.","'ArrowForwardIosIcon' is defined but never used.","'axios' is defined but never used.","'setTutorial' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tutorial'. Either include it or remove the dependency array.",["477"],"'useEffect' is defined but never used.","'Grid' is defined but never used.","'DialogTitle' is defined but never used.","'tutorialSelect' is assigned a value but never used.","'ErrorOutlineIcon' is defined but never used.","'useState' is defined but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","'patient' is assigned a value but never used.","'setPatient' is assigned a value but never used.","'withTheme' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'KeyboardArrowRightIcon' is defined but never used.","'set' is defined but never used.","'theme' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getTodaysSchedule' and 'patient'. Either include them or remove the dependency array.",["478"],"'tutorialsClicked' is assigned a value but never used.","'tutorialsLoaded' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user.infusionArray'. Either include it or remove the dependency array.",["479"],"'handleTutorialClicked' is assigned a value but never used.",["473"],["474"],"'Switch' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useContext' is defined but never used.","'UserContext' is defined but never used.","'AccountCircle' is defined but never used.","'Menu' is defined but never used.","'CloseIcon' is defined but never used.","'openProfile' is assigned a value but never used.","'openHamburger' is assigned a value but never used.","'hbIcon' is assigned a value but never used.","'closeIcon' is assigned a value but never used.","'handleProfile' is assigned a value but never used.","'handleCloseProfile' is assigned a value but never used.","'handleHamburger' is assigned a value but never used.","'handleHamburgerClose' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'FormLabel' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'CreateIcon' is defined but never used.","'phone' is assigned a value but never used.","'setPhone' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'notifyPhone' is assigned a value but never used.","'setNotifyPhone' is assigned a value but never used.","'notifyEmail' is assigned a value but never used.","'setNotifyEmail' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},"Update the dependencies array to be: [user.notificationType]",{"range":"490","text":"491"},"Update the dependencies array to be: [getNextInfusion, getTodaysSchedule, user.events.length]",{"range":"492","text":"493"},"Update the dependencies array to be: [tutorial]",{"range":"494","text":"495"},"Update the dependencies array to be: [getTodaysSchedule, patient]",{"range":"496","text":"497"},"Update the dependencies array to be: [user.infusionArray]",{"range":"498","text":"499"},[4294,4296],"[user.notificationType]",[4458,4460],"[getNextInfusion, getTodaysSchedule, user.events.length]",[2913,2915],"[tutorial]",[14903,14905],"[getTodaysSchedule, patient]",[883,885],"[user.infusionArray]"]